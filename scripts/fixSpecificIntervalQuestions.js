const mongoose = require('mongoose');
require('dotenv').config();

const Quiz = require('../src/models/Quiz');

// Conectar ao banco
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB');
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    process.exit(1);
  }
};

// Corrigir quest√µes espec√≠ficas que n√£o foram atualizadas corretamente
const fixSpecificQuestions = async () => {
  try {
    console.log('üîß Iniciando corre√ß√£o de quest√µes espec√≠ficas...');
    
    // Corrigir as quest√µes sobre intervalos musicais
    const intervalosQuiz = await Quiz.findOne({ title: { $regex: /Intervalos Musicais/i } });
    
    if (intervalosQuiz) {
      console.log('‚úÖ Quiz de intervalos musicais encontrado');
      let quizModified = false;
      
      // Quest√£o: Intervalo entre F√° e Si
      const faSiQuestion = intervalosQuiz.questions.find(q => 
        q.question.includes('F√° e Si'));
      
      if (faSiQuestion) {
        console.log(`\nüîç Analisando quest√£o: "${faSiQuestion.question}"`);
        console.log('   Op√ß√µes atuais:');
        faSiQuestion.options.forEach((opt, i) => {
          console.log(`   ${i+1}. ${opt.label} (${opt.isCorrect ? '‚úì' : '‚úó'})`);
        });
        
        // Verificar se a op√ß√£o "4¬™ aumentada" j√° est√° correta
        const correctOptionIndex = faSiQuestion.options.findIndex(opt => 
          opt.label.toLowerCase().includes('4¬™ aumentada'));
        
        if (correctOptionIndex !== -1 && faSiQuestion.options[correctOptionIndex].isCorrect) {
          console.log('   ‚úÖ Quest√£o j√° est√° correta');
        } else {
          console.log('   üîß Corrigindo quest√£o...');
          
          // Encontrar o √≠ndice da quest√£o no array
          const questionIndex = intervalosQuiz.questions.findIndex(q => q === faSiQuestion);
          
          // Marcar todas as op√ß√µes como incorretas
          for (let i = 0; i < faSiQuestion.options.length; i++) {
            intervalosQuiz.questions[questionIndex].options[i].isCorrect = false;
          }
          
          // Marcar a op√ß√£o "4¬™ aumentada" como correta
          if (correctOptionIndex !== -1) {
            intervalosQuiz.questions[questionIndex].options[correctOptionIndex].isCorrect = true;
            console.log(`   ‚úÖ Op√ß√£o "${faSiQuestion.options[correctOptionIndex].label}" marcada como correta`);
          } else {
            // Se n√£o encontrar "4¬™ aumentada", procurar por "tr√≠tono" ou similar
            const alternateIndex = faSiQuestion.options.findIndex(opt => 
              opt.label.toLowerCase().includes('tr√≠tono') || 
              opt.label.toLowerCase().includes('tritono'));
            
            if (alternateIndex !== -1) {
              intervalosQuiz.questions[questionIndex].options[alternateIndex].isCorrect = true;
              console.log(`   ‚úÖ Op√ß√£o alternativa "${faSiQuestion.options[alternateIndex].label}" marcada como correta`);
            } else {
              console.log('   ‚ùå N√£o foi poss√≠vel encontrar uma op√ß√£o correta');
            }
          }
          
          quizModified = true;
        }
        
        // Atualizar a explica√ß√£o
        const questionIndex = intervalosQuiz.questions.findIndex(q => q === faSiQuestion);
        intervalosQuiz.questions[questionIndex].explanation = 
          "O intervalo entre F√° e Si √© uma 4¬™ aumentada (tamb√©m conhecido como tr√≠tono). Cont√©m 3 tons de dist√¢ncia (6 semitons) e √© tradicionalmente considerado dissonante. Na hist√≥ria da m√∫sica ocidental, era chamado de 'diabolus in musica' (o diabo na m√∫sica) devido √† sua instabilidade sonora.";
        console.log('   ‚úÖ Explica√ß√£o atualizada');
        quizModified = true;
      }
      
      // Quest√£o: Intervalo entre 1¬∫ e 5¬∫ graus
      const grausQuestion = intervalosQuiz.questions.find(q => 
        q.question.includes('1¬∫ e o 5¬∫ graus'));
      
      if (grausQuestion) {
        console.log(`\nüîç Analisando quest√£o: "${grausQuestion.question}"`);
        console.log('   Op√ß√µes atuais:');
        grausQuestion.options.forEach((opt, i) => {
          console.log(`   ${i+1}. ${opt.label} (${opt.isCorrect ? '‚úì' : '‚úó'})`);
        });
        
        // Verificar se a op√ß√£o "5¬™ justa" j√° est√° correta
        const correctOptionIndex = grausQuestion.options.findIndex(opt => 
          opt.label.toLowerCase().includes('5¬™ justa'));
        
        if (correctOptionIndex !== -1 && grausQuestion.options[correctOptionIndex].isCorrect) {
          console.log('   ‚úÖ Quest√£o j√° est√° correta');
        } else {
          console.log('   üîß Corrigindo quest√£o...');
          
          // Encontrar o √≠ndice da quest√£o no array
          const questionIndex = intervalosQuiz.questions.findIndex(q => q === grausQuestion);
          
          // Marcar todas as op√ß√µes como incorretas
          for (let i = 0; i < grausQuestion.options.length; i++) {
            intervalosQuiz.questions[questionIndex].options[i].isCorrect = false;
          }
          
          // Marcar a op√ß√£o "5¬™ justa" como correta
          if (correctOptionIndex !== -1) {
            intervalosQuiz.questions[questionIndex].options[correctOptionIndex].isCorrect = true;
            console.log(`   ‚úÖ Op√ß√£o "${grausQuestion.options[correctOptionIndex].label}" marcada como correta`);
          } else {
            console.log('   ‚ùå N√£o foi poss√≠vel encontrar uma op√ß√£o correta');
          }
          
          quizModified = true;
        }
        
        // Atualizar a explica√ß√£o
        const questionIndex = intervalosQuiz.questions.findIndex(q => q === grausQuestion);
        intervalosQuiz.questions[questionIndex].explanation = 
          "Na escala maior, o intervalo entre o 1¬∫ e o 5¬∫ graus √© sempre uma 5¬™ justa (7 semitons). Esta rela√ß√£o √© fundamental na harmonia tonal, estabelecendo a rela√ß√£o t√¥nica-dominante. Por exemplo, em D√≥ maior: D√≥ (1¬∫) e Sol (5¬∫) formam uma 5¬™ justa. Este intervalo √© a base do ciclo de quintas.";
        console.log('   ‚úÖ Explica√ß√£o atualizada');
        quizModified = true;
      }
      
      // Salvar as altera√ß√µes se necess√°rio
      if (quizModified) {
        await intervalosQuiz.save();
        console.log('\n‚úÖ Quiz de intervalos musicais salvo com sucesso');
      } else {
        console.log('\n‚úÖ Nenhuma altera√ß√£o necess√°ria no quiz de intervalos musicais');
      }
    } else {
      console.log('‚ùå Quiz de intervalos musicais n√£o encontrado');
    }
    
    // Corrigir as quest√µes de harmonia avan√ßada
    const harmoniaQuiz = await Quiz.findOne({ title: { $regex: /Harmonia Avan√ßada/i } });
    
    if (harmoniaQuiz) {
      console.log('\n‚úÖ Quiz de harmonia avan√ßada encontrado');
      let quizModified = false;
      
      // Quest√£o: Substitui√ß√£o trit√¥nica
      const substitutionQuestion = harmoniaQuiz.questions.find(q => 
        q.question.includes('substitui√ß√£o trit√¥nica'));
      
      if (substitutionQuestion) {
        console.log(`\nüîç Analisando quest√£o: "${substitutionQuestion.question}"`);
        console.log('   Op√ß√µes atuais:');
        substitutionQuestion.options.forEach((opt, i) => {
          console.log(`   ${i+1}. ${opt.label} (${opt.isCorrect ? '‚úì' : '‚úó'})`);
        });
        
        // Verificar se a op√ß√£o "Db7" (ou equivalente) j√° est√° correta
        const correctOptionIndex = substitutionQuestion.options.findIndex(opt => 
          opt.label.includes('Db7') || opt.label.includes('bII7'));
        
        if (correctOptionIndex !== -1 && substitutionQuestion.options[correctOptionIndex].isCorrect) {
          console.log('   ‚úÖ Quest√£o j√° est√° correta');
        } else {
          console.log('   üîß Corrigindo quest√£o...');
          
          // Encontrar o √≠ndice da quest√£o no array
          const questionIndex = harmoniaQuiz.questions.findIndex(q => q === substitutionQuestion);
          
          // Marcar todas as op√ß√µes como incorretas
          for (let i = 0; i < substitutionQuestion.options.length; i++) {
            harmoniaQuiz.questions[questionIndex].options[i].isCorrect = false;
          }
          
          // Marcar a op√ß√£o "Db7" como correta
          if (correctOptionIndex !== -1) {
            harmoniaQuiz.questions[questionIndex].options[correctOptionIndex].isCorrect = true;
            console.log(`   ‚úÖ Op√ß√£o "${substitutionQuestion.options[correctOptionIndex].label}" marcada como correta`);
          } else {
            console.log('   ‚ùå N√£o foi poss√≠vel encontrar uma op√ß√£o correta');
          }
          
          quizModified = true;
        }
        
        // Atualizar a explica√ß√£o
        const questionIndex = harmoniaQuiz.questions.findIndex(q => q === substitutionQuestion);
        harmoniaQuiz.questions[questionIndex].explanation = 
          "A substitui√ß√£o trit√¥nica do V7 √© o acorde de s√©tima constru√≠do sobre o segundo grau abaixado (bII7). Por exemplo, em D√≥ maior, o G7 (V7) pode ser substitu√≠do pelo Db7 (bII7). Estes acordes compartilham as notas guia (3¬™ e 7¬™) e suas fundamentais est√£o separadas por um tr√≠tono. Esta substitui√ß√£o √© muito utilizada no jazz e na m√∫sica popular.";
        console.log('   ‚úÖ Explica√ß√£o atualizada');
        quizModified = true;
      }
      
      // Quest√£o: Cad√™ncia aut√™ntica perfeita
      const cadenciaQuestion = harmoniaQuiz.questions.find(q => 
        q.question.includes('cad√™ncia aut√™ntica'));
      
      if (cadenciaQuestion) {
        console.log(`\nüîç Analisando quest√£o: "${cadenciaQuestion.question}"`);
        console.log('   Op√ß√µes atuais:');
        cadenciaQuestion.options.forEach((opt, i) => {
          console.log(`   ${i+1}. ${opt.label} (${opt.isCorrect ? '‚úì' : '‚úó'})`);
        });
        
        // Verificar se a op√ß√£o que menciona "V7-I" j√° est√° correta
        // Ou se a op√ß√£o que menciona "G7-C" est√° correta (em contexto de D√≥ maior)
        const correctOptionIndex = cadenciaQuestion.options.findIndex(opt => 
          opt.label.toLowerCase().includes('v7-i') || 
          (opt.label.includes('G7') && opt.label.includes('C') && !opt.label.includes('Am')));
        
        if (correctOptionIndex !== -1 && cadenciaQuestion.options[correctOptionIndex].isCorrect) {
          console.log('   ‚úÖ Quest√£o j√° est√° correta');
        } else {
          console.log('   üîß Corrigindo quest√£o...');
          
          // Encontrar o √≠ndice da quest√£o no array
          const questionIndex = harmoniaQuiz.questions.findIndex(q => q === cadenciaQuestion);
          
          // Marcar todas as op√ß√µes como incorretas
          for (let i = 0; i < cadenciaQuestion.options.length; i++) {
            harmoniaQuiz.questions[questionIndex].options[i].isCorrect = false;
          }
          
          // Marcar a op√ß√£o correta
          if (correctOptionIndex !== -1) {
            harmoniaQuiz.questions[questionIndex].options[correctOptionIndex].isCorrect = true;
            console.log(`   ‚úÖ Op√ß√£o "${cadenciaQuestion.options[correctOptionIndex].label}" marcada como correta`);
          } else {
            // Se n√£o encontrar a op√ß√£o ideal, procurar a melhor op√ß√£o dispon√≠vel
            // Neste caso, uma progress√£o que termine com V-I ou G-C
            const bestOptionIndex = cadenciaQuestion.options.findIndex(opt => 
              opt.label.includes('G') && opt.label.includes('C'));
            
            if (bestOptionIndex !== -1) {
              harmoniaQuiz.questions[questionIndex].options[bestOptionIndex].isCorrect = true;
              console.log(`   ‚úÖ Melhor op√ß√£o dispon√≠vel "${cadenciaQuestion.options[bestOptionIndex].label}" marcada como correta`);
            } else {
              console.log('   ‚ùå N√£o foi poss√≠vel encontrar uma op√ß√£o adequada');
            }
          }
          
          quizModified = true;
        }
        
        // Atualizar a explica√ß√£o
        const questionIndex = harmoniaQuiz.questions.findIndex(q => q === cadenciaQuestion);
        harmoniaQuiz.questions[questionIndex].explanation = 
          "A cad√™ncia aut√™ntica perfeita consiste na progress√£o V7-I (dominante para t√¥nica) com ambos os acordes em estado fundamental e com a t√¥nica na voz mais aguda do acorde final. √â considerada a cad√™ncia mais conclusiva na m√∫sica tonal, criando forte sensa√ß√£o de resolu√ß√£o e finaliza√ß√£o.";
        console.log('   ‚úÖ Explica√ß√£o atualizada');
        quizModified = true;
      }
      
      // Quest√£o: T√©cnica de harmoniza√ß√£o
      const tecnicaQuestion = harmoniaQuiz.questions.find(q => 
        q.question.includes('t√©cnica de harmoniza√ß√£o'));
      
      if (tecnicaQuestion) {
        console.log(`\nüîç Analisando quest√£o: "${tecnicaQuestion.question}"`);
        console.log('   Op√ß√µes atuais:');
        tecnicaQuestion.options.forEach((opt, i) => {
          console.log(`   ${i+1}. ${opt.label} (${opt.isCorrect ? '‚úì' : '‚úó'})`);
        });
        
        // Verificar se a op√ß√£o que menciona "extens√µes" ou "crom√°tica" j√° est√° correta
        const correctOptionIndex = tecnicaQuestion.options.findIndex(opt => 
          opt.label.toLowerCase().includes('extens√µes') || 
          opt.label.toLowerCase().includes('crom√°tica'));
        
        if (correctOptionIndex !== -1 && tecnicaQuestion.options[correctOptionIndex].isCorrect) {
          console.log('   ‚úÖ Quest√£o j√° est√° correta');
        } else {
          console.log('   üîß Corrigindo quest√£o...');
          
          // Encontrar o √≠ndice da quest√£o no array
          const questionIndex = harmoniaQuiz.questions.findIndex(q => q === tecnicaQuestion);
          
          // Marcar todas as op√ß√µes como incorretas
          for (let i = 0; i < tecnicaQuestion.options.length; i++) {
            harmoniaQuiz.questions[questionIndex].options[i].isCorrect = false;
          }
          
          // Marcar a op√ß√£o correta
          if (correctOptionIndex !== -1) {
            harmoniaQuiz.questions[questionIndex].options[correctOptionIndex].isCorrect = true;
            console.log(`   ‚úÖ Op√ß√£o "${tecnicaQuestion.options[correctOptionIndex].label}" marcada como correta`);
          } else {
            console.log('   ‚ùå N√£o foi poss√≠vel encontrar uma op√ß√£o adequada');
          }
          
          quizModified = true;
        }
        
        // Atualizar a explica√ß√£o
        const questionIndex = harmoniaQuiz.questions.findIndex(q => q === tecnicaQuestion);
        harmoniaQuiz.questions[questionIndex].explanation = 
          "As extens√µes harm√¥nicas s√£o notas adicionadas al√©m da tr√≠ade b√°sica (como 7¬™, 9¬™, 11¬™ e 13¬™). S√£o muito utilizadas no jazz e na m√∫sica popular para criar sonoridades mais ricas e complexas. A harmoniza√ß√£o crom√°tica tamb√©m utiliza acordes com notas que n√£o pertencem √† tonalidade, criando tens√£o e colorido harm√¥nico.";
        console.log('   ‚úÖ Explica√ß√£o atualizada');
        quizModified = true;
      }
      
      // Salvar as altera√ß√µes se necess√°rio
      if (quizModified) {
        await harmoniaQuiz.save();
        console.log('\n‚úÖ Quiz de harmonia avan√ßada salvo com sucesso');
      } else {
        console.log('\n‚úÖ Nenhuma altera√ß√£o necess√°ria no quiz de harmonia avan√ßada');
      }
    } else {
      console.log('‚ùå Quiz de harmonia avan√ßada n√£o encontrado');
    }
    
    console.log('\n‚úÖ Corre√ß√µes espec√≠ficas conclu√≠das');
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir quest√µes espec√≠ficas:', error);
  }
};

// Verificar a consist√™ncia final
const verifyFinalState = async () => {
  try {
    console.log('\nüîç Verificando estado final dos quizzes...');
    
    // Buscar todos os quizzes
    const quizzes = await Quiz.find({});
    console.log(`üìä Encontrados ${quizzes.length} quizzes no banco de dados`);
    
    let allCorrect = true;
    
    // Verificar cada quiz
    for (const quiz of quizzes) {
      console.log(`\nüìù Quiz: ${quiz.title}`);
      
      // Verificar cada quest√£o
      for (let i = 0; i < quiz.questions.length; i++) {
        const question = quiz.questions[i];
        
        // Contar op√ß√µes corretas
        const correctOptions = question.options.filter(opt => opt.isCorrect);
        const correctCount = correctOptions.length;
        
        // Verificar explica√ß√£o
        const hasExplanation = question.explanation && question.explanation.length > 20;
        
        // Log baseado no resultado
        if (correctCount !== 1 || !hasExplanation) {
          allCorrect = false;
          
          if (correctCount !== 1) {
            console.log(`‚ùå Quest√£o ${i+1} com ${correctCount} respostas corretas: "${question.question.substring(0, 40)}..."`);
          }
          
          if (!hasExplanation) {
            console.log(`‚ö†Ô∏è Quest√£o ${i+1} sem explica√ß√£o adequada: "${question.question.substring(0, 40)}..."`);
          }
        } else {
          console.log(`‚úÖ Quest√£o ${i+1}: "${question.question.substring(0, 40)}..." - OK`);
        }
      }
    }
    
    if (allCorrect) {
      console.log('\nüéâ Todos os quizzes est√£o corretamente configurados!');
    } else {
      console.log('\n‚ö†Ô∏è Ainda h√° quest√µes que precisam de aten√ß√£o!');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar estado final:', error);
  }
};

// Executar o script
const main = async () => {
  try {
    await connectDB();
    
    // Corrigir quest√µes espec√≠ficas
    await fixSpecificQuestions();
    
    // Verificar estado final
    await verifyFinalState();
    
    console.log('\n‚ú® Processo conclu√≠do!');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erro fatal durante a execu√ß√£o:', error);
    process.exit(1);
  }
};

// Iniciar o script
main();





















