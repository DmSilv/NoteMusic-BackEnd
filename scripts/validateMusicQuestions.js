const mongoose = require('mongoose');
require('dotenv').config();

const Quiz = require('../src/models/Quiz');

// Conectar ao banco
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB');
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    process.exit(1);
  }
};

// Validar todas as perguntas de teoria musical
const validateMusicQuestions = async () => {
  try {
    console.log('üîç Validando todas as perguntas de teoria musical...');
    
    // Buscar todos os quizzes
    const quizzes = await Quiz.find({});
    console.log(`üìä Encontrados ${quizzes.length} quizzes no banco de dados`);
    
    // Definir as respostas corretas para verifica√ß√£o
    const correctAnswers = {
      // Propriedades do Som
      "Qual propriedade do som determina se uma nota √© grave ou aguda?": "Altura",
      "O que diferencia o som de um violino e um piano tocando a mesma nota?": "Timbre",
      "Qual s√≠mbolo musical indica que uma nota deve ser tocada com pouca intensidade?": "p (piano)",
      "Qual figura musical representa a maior dura√ß√£o em um compasso simples?": "Semibreve",
      "O que significa o s√≠mbolo de crescendo (<) na partitura?": "Aumentar gradualmente a intensidade",
      
      // Nota√ß√£o Musical
      "Quantas linhas possui um pentagrama padr√£o?": "5 linhas",
      "Em uma partitura com clave de Sol, onde se localiza a nota Sol?": "Na segunda linha",
      "Quantos tempos vale uma m√≠nima?": "2 tempos",
      "Qual figura musical representa a metade da dura√ß√£o de uma sem√≠nima?": "Colcheia",
      "O que indica a fra√ß√£o 4/4 no in√≠cio de uma partitura?": "A f√≥rmula de compasso",
      
      // Intervalos Musicais
      "Qual √© o intervalo entre as notas D√≥ e Mi?": "3¬™ maior",
      "Qual intervalo √© considerado 'conson√¢ncia perfeita'?": "5¬™ justa",
      "Quantos tons tem um intervalo de 3¬™ menor?": "1,5 tons",
      "Qual √© o intervalo entre as notas F√° e Si?": "4¬™ aumentada",
      "Na escala maior, qual √© o intervalo formado entre o 1¬∫ e o 5¬∫ graus?": "5¬™ justa"
    };
    
    // Para cada quiz
    for (const quiz of quizzes) {
      console.log(`\nüéµ Validando quiz: ${quiz.title}`);
      
      // Para cada quest√£o
      for (let i = 0; i < quiz.questions.length; i++) {
        const question = quiz.questions[i];
        
        // Limpar a pergunta para compara√ß√£o (remover emojis e prefixos)
        const cleanQuestion = question.question
          .replace(/^[üéµüé∂üéπüéºüé∏üé∫ü•Åüéª]/, '')
          .replace(/^Na teoria musical, /, '')
          .replace(/^De acordo com os princ√≠pios da m√∫sica, /, '')
          .replace(/^Em termos de nota√ß√£o musical, /, '')
          .replace(/^Considerando os conceitos b√°sicos, /, '')
          .replace(/^No contexto da harmonia musical, /, '')
          .replace(/^Analisando a estrutura musical, /, '')
          .trim();
        
        // Verificar se esta pergunta est√° em nossa lista de verifica√ß√£o
        let expectedAnswer = null;
        for (const [key, value] of Object.entries(correctAnswers)) {
          if (cleanQuestion.includes(key) || key.includes(cleanQuestion)) {
            expectedAnswer = value;
            break;
          }
        }
        
        if (expectedAnswer) {
          console.log(`\nüìù Quest√£o ${i+1}: "${question.question}"`);
          
          // Verificar as op√ß√µes
          const options = question.options;
          const correctOptionIndex = options.findIndex(opt => opt.isCorrect);
          
          if (correctOptionIndex === -1) {
            console.log('‚ùå Nenhuma op√ß√£o marcada como correta');
            continue;
          }
          
          const correctOption = options[correctOptionIndex];
          console.log(`‚úÖ Op√ß√£o marcada como correta: "${correctOption.label}"`);
          
          // Verificar se a resposta correta cont√©m o texto esperado
          const isExpectedAnswer = correctOption.label.toLowerCase().includes(expectedAnswer.toLowerCase());
          
          if (isExpectedAnswer) {
            console.log('‚úÖ A resposta est√° correta conforme o esperado');
          } else {
            console.log(`‚ö†Ô∏è A resposta n√£o parece ser a esperada. Esperava: "${expectedAnswer}"`);
            
            // Procurar a op√ß√£o que cont√©m o texto esperado
            const expectedOptionIndex = options.findIndex(opt => 
              opt.label.toLowerCase().includes(expectedAnswer.toLowerCase())
            );
            
            if (expectedOptionIndex !== -1) {
              console.log(`‚ÑπÔ∏è Op√ß√£o com o texto esperado: "${options[expectedOptionIndex].label}"`);
            } else {
              console.log('‚ùå Nenhuma op√ß√£o cont√©m o texto esperado');
            }
          }
          
          // Verificar se a explica√ß√£o est√° presente
          if (question.explanation && question.explanation.length > 30) {
            console.log('‚úÖ Explica√ß√£o est√° presente e detalhada');
          } else {
            console.log('‚ö†Ô∏è Explica√ß√£o ausente ou muito curta');
          }
        }
      }
    }
    
    console.log('\n‚úÖ Valida√ß√£o conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro ao validar perguntas de teoria musical:', error);
  }
};

// Executar o script
const main = async () => {
  try {
    await connectDB();
    await validateMusicQuestions();
    console.log('\n‚ú® Processo conclu√≠do!');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erro fatal durante a execu√ß√£o:', error);
    process.exit(1);
  }
};

// Iniciar o script
main();

























