const axios = require('axios');

const API_URL = 'http://localhost:3333';

async function testCategoriesOptimized() {
  console.log('üß™ Testando novo endpoint OTIMIZADO de categorias...\n');
  console.log(`üìç URL: ${API_URL}\n`);

  try {
    // Teste 1: Novo endpoint otimizado
    console.log('1Ô∏è‚É£ Testando GET /api/modules/categories-with-modules (OTIMIZADO)...');
    const start1 = Date.now();
    const res1 = await axios.get(`${API_URL}/api/modules/categories-with-modules`);
    const time1 = Date.now() - start1;
    
    console.log(`   ‚è±Ô∏è  Tempo: ${time1}ms`);
    console.log(`   üìä Categorias: ${res1.data.categories.length}`);
    console.log(`   üìä Total m√≥dulos: ${res1.data.meta?.totalModules || 'N/A'}`);
    console.log(`   ‚ö° Query time: ${res1.data.meta?.queryTime || 'N/A'}ms\n`);
    
    // Verificar se tem quizTimeLimit nos m√≥dulos
    let modulesWithQuizTime = 0;
    let modulesWithoutQuizTime = 0;
    let totalModules = 0;
    
    res1.data.categories.forEach(cat => {
      cat.modules.forEach(module => {
        totalModules++;
        if (module.quizTimeLimit) {
          modulesWithQuizTime++;
        } else {
          modulesWithoutQuizTime++;
        }
      });
    });
    
    console.log(`   ‚úÖ M√≥dulos COM quizTimeLimit: ${modulesWithQuizTime}/${totalModules}`);
    if (modulesWithoutQuizTime > 0) {
      console.log(`   ‚ö†Ô∏è  M√≥dulos SEM quizTimeLimit: ${modulesWithoutQuizTime}`);
    }
    console.log('');
    
    // Teste 2: Comparar com m√©todo antigo (m√∫ltiplas requisi√ß√µes)
    console.log('2Ô∏è‚É£ Comparando com m√©todo ANTIGO (simula√ß√£o)...');
    console.log('   M√©todo antigo faria:');
    console.log(`   - 1x GET /api/modules`);
    console.log(`   - ${totalModules}x GET /api/quiz/:moduleId (para quizTimeLimit)`);
    console.log(`   Total: ${totalModules + 1} requisi√ß√µes\n`);
    
    // Teste 3: Segunda chamada (com cache)
    console.log('3Ô∏è‚É£ Segunda chamada (COM cache)...');
    const start2 = Date.now();
    const res2 = await axios.get(`${API_URL}/api/modules/categories-with-modules`);
    const time2 = Date.now() - start2;
    console.log(`   ‚è±Ô∏è  Tempo: ${time2}ms`);
    
    const improvement = ((time1 - time2) / time1 * 100).toFixed(1);
    console.log(`   üìà Melhoria com cache: ${improvement}%\n`);
    
    // Teste 4: Verificar estrutura de dados
    console.log('4Ô∏è‚É£ Verificando estrutura de dados...');
    if (res1.data.categories.length > 0) {
      const firstCat = res1.data.categories[0];
      console.log(`   ‚úÖ Primeira categoria: ${firstCat.name}`);
      console.log(`   ‚úÖ Tem ${firstCat.modules.length} m√≥dulos`);
      
      if (firstCat.modules.length > 0) {
        const firstModule = firstCat.modules[0];
        console.log(`   ‚úÖ Primeiro m√≥dulo: ${firstModule.title}`);
        console.log(`   ‚úÖ Tem quizTimeLimit: ${firstModule.quizTimeLimit ? 'SIM ‚úÖ' : 'N√ÉO ‚ùå'}`);
        console.log(`   ‚úÖ Campos: id, title, category, level, order, quizTimeLimit`);
      }
    }
    
    console.log('\n' + '='.repeat(60));
    console.log('üìä RESUMO');
    console.log('='.repeat(60));
    console.log(`‚úÖ Endpoint funcionando corretamente!`);
    console.log(`‚úÖ Tempo primeira chamada: ${time1}ms`);
    console.log(`‚úÖ Tempo com cache: ${time2}ms`);
    console.log(`‚úÖ Redu√ß√£o de ${totalModules + 1} para 1 requisi√ß√£o!`);
    console.log(`‚úÖ Economia: ${((totalModules + 1 - 1) / (totalModules + 1) * 100).toFixed(1)}% menos requisi√ß√µes`);
    console.log('='.repeat(60) + '\n');
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
    if (error.code === 'ECONNREFUSED') {
      console.error('‚ö†Ô∏è Servidor n√£o est√° rodando! Execute: npm start');
    } else if (error.response) {
      console.error(`‚ö†Ô∏è Status: ${error.response.status}`);
      console.error(`‚ö†Ô∏è Erro: ${JSON.stringify(error.response.data, null, 2)}`);
    }
    process.exit(1);
  }
}

testCategoriesOptimized();

