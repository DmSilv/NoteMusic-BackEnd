const mongoose = require('mongoose');
require('dotenv').config();

const Quiz = require('../src/models/Quiz');

// Conectar ao banco
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB\n');
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    process.exit(1);
  }
};

// CORRE√á√ïES ESPEC√çFICAS COM RESPOSTAS CERTAS
const CORRECOES = {
  // FIGURAS MUSICAIS
  'quantas colcheias cabem em uma sem√≠nima': {
    respostaCorreta: '2',
    explicacao: '2 colcheias cabem em 1 sem√≠nima! A colcheia vale meio tempo, ent√£o 0,5 + 0,5 = 1 tempo. ‚ô™‚ô™ = ‚ô©'
  },
  'qual figura musical equivale a metade da dura√ß√£o de uma semibreve': {
    respostaCorreta: 'm√≠nima',
    explicacao: 'A M√çNIMA vale metade da semibreve! Semibreve = 4 tempos, M√≠nima = 2 tempos. ùÖù = ùÖóùÖ•/2'
  },
  
  // PULSA√á√ÉO E TEMPO
  'o que √© a pulsa√ß√£o musical': {
    respostaCorreta: 'batida regular',
    explicacao: 'A pulsa√ß√£o √© a BATIDA REGULAR que sentimos na m√∫sica, como as batidas do cora√ß√£o! √â o "tic-tac" constante da m√∫sica. üíì'
  },
  'o que significa bpm na m√∫sica': {
    respostaCorreta: 'batidas por minuto',
    explicacao: 'BPM = Batidas Por Minuto! Indica a velocidade da m√∫sica. BPM 60 = 1 batida por segundo, BPM 120 = 2 batidas por segundo. ‚è±Ô∏è'
  },
  
  // F√ìRMULAS DE COMPASSO
  'na f√≥rmula de compasso 4/4, o que significa o primeiro n√∫mero': {
    respostaCorreta: '4 tempos',
    explicacao: 'O n√∫mero de CIMA (4) indica quantos TEMPOS tem em cada compasso! Em 4/4 temos 4 tempos por compasso. üéµüéµüéµüéµ'
  },
  'na f√≥rmula de compasso 3/4, o que significa o segundo n√∫mero': {
    respostaCorreta: 'sem√≠nima',
    explicacao: 'O n√∫mero de BAIXO (4) indica que cada tempo vale uma SEM√çNIMA! O 4 representa a sem√≠nima como unidade de tempo. ‚ô©'
  },
  'como se chama a linha vertical que divide os compassos': {
    respostaCorreta: 'barra de compasso',
    explicacao: 'A BARRA DE COMPASSO (|) √© a linha vertical que separa os compassos na partitura! Como se fossem "cercas" dividindo a m√∫sica. |üéµ|üéµ|'
  },
  
  // COMPASSOS SIMPLES
  'qual das seguintes alternativas representa um compasso simples': {
    respostaCorreta: '2/4',
    explicacao: 'Compassos SIMPLES t√™m numerador 2, 3 ou 4! Exemplos: 2/4, 3/4, 4/4. O tempo √© dividido em 2 partes (bin√°rio). ‚ô©=‚ô™‚ô™'
  },
  'qual √© a caracter√≠stica principal de um compasso simples': {
    respostaCorreta: 'divis√£o bin√°ria',
    explicacao: 'No compasso SIMPLES, cada tempo se divide em 2 partes IGUAIS! Uma sem√≠nima vira 2 colcheias. ‚ô© ‚Üí ‚ô™‚ô™'
  },
  'em um compasso 2/4, qual figura ocupa um compasso inteiro': {
    respostaCorreta: 'm√≠nima',
    explicacao: 'Em 2/4 temos 2 tempos, e a M√çNIMA vale 2 tempos! Ent√£o ela ocupa o compasso inteiro. ùÖóùÖ• = 2 tempos'
  },
  
  // COMPASSOS COMPOSTOS
  'qual das seguintes alternativas representa um compasso composto': {
    respostaCorreta: '6/8',
    explicacao: 'Compassos COMPOSTOS t√™m numerador 6, 9 ou 12! Exemplos: 6/8, 9/8, 12/8. O tempo √© dividido em 3 partes (tern√°rio). ‚ô©.=‚ô™‚ô™‚ô™'
  },
  'qual √© a caracter√≠stica principal de um compasso composto': {
    respostaCorreta: 'divis√£o tern√°ria',
    explicacao: 'No compasso COMPOSTO, cada tempo se divide em 3 partes IGUAIS! Uma sem√≠nima pontuada vira 3 colcheias. ‚ô©. ‚Üí ‚ô™‚ô™‚ô™'
  },
  
  // TONS E SEMITONS
  'o que √© um tom na m√∫sica': {
    respostaCorreta: '2 semitons',
    explicacao: 'Um TOM √© a dist√¢ncia de 2 SEMITONS (2 casas no piano)! Exemplo: de D√≥ para R√© √© 1 tom (passa por D√≥#). üéπ'
  },
  'entre quais notas da escala diat√¥nica existe naturalmente um semitom': {
    respostaCorreta: 'mi e f√°',
    explicacao: 'Entre MI-F√Å e SI-D√ì existem SEMITONS naturais (n√£o tem tecla preta no meio no piano)! Todas as outras t√™m 1 tom. üéπ'
  },
  'quantos semitons comp√µem um tom': {
    respostaCorreta: '2',
    explicacao: '1 TOM = 2 SEMITONS! O semitom √© a menor dist√¢ncia entre duas notas, e o tom √© o dobro disso. üéµ'
  },
  
  // INTERVALOS
  'o que √© um intervalo de quinta justa': {
    respostaCorreta: 'quinta nota',
    explicacao: 'A QUINTA JUSTA √© a dist√¢ncia da 1¬™ at√© a 5¬™ nota da escala! Exemplo: de D√≥ at√© Sol (D√≥-R√©-Mi-F√°-Sol). Vale 7 semitons. üéµ'
  },
  'quantos semitons existem em um intervalo de oitava justa': {
    respostaCorreta: '12',
    explicacao: 'Uma OITAVA tem 12 SEMITONS! √â a dist√¢ncia de uma nota at√© a mesma nota mais aguda (ex: D√≥ grave ‚Üí D√≥ agudo). üéπ'
  },
  'qual √© o intervalo entre d√≥ e mi': {
    respostaCorreta: 'ter√ßa maior',
    explicacao: 'D√≥ at√© Mi √© uma TER√áA MAIOR! S√£o 3 notas (D√≥-R√©-Mi) e 4 semitons de dist√¢ncia. √â o intervalo que forma acordes maiores! üéµ'
  },
  
  // ESCALAS
  'quantas notas tem uma escala maior diat√¥nica': {
    respostaCorreta: '7',
    explicacao: 'A escala maior tem 7 NOTAS diferentes! Exemplo: D√≥-R√©-Mi-F√°-Sol-L√°-Si (depois volta pro D√≥). üéº'
  },
  'qual √© o padr√£o de tons (t) e semitons (s) de uma escala maior': {
    respostaCorreta: 't-t-s-t-t-t-s',
    explicacao: 'Escala MAIOR = T-T-S-T-T-T-S! Memorize: "Tom Tom Semi, Tom Tom Tom Semi". Exemplo: D√≥-R√©-Mi-F√°-Sol-L√°-Si. üéµ'
  },
  'quais s√£o as notas da escala de d√≥ maior': {
    respostaCorreta: 'd√≥, r√©, mi, f√°, sol, l√°, si',
    explicacao: 'D√≥ maior: D√≥-R√©-Mi-F√°-Sol-L√°-Si! √â a escala SEM acidentes (sem # ou ‚ô≠). A mais b√°sica! üéπ'
  },
  'qual √© a relativa menor da tonalidade de d√≥ maior': {
    respostaCorreta: 'l√° menor',
    explicacao: 'A relativa menor de D√≥ maior √© L√Å MENOR! Tem as mesmas notas, mas come√ßa no L√°: L√°-Si-D√≥-R√©-Mi-F√°-Sol. üéµ'
  },
  'qual √© a caracter√≠stica principal de uma escala menor natural': {
    respostaCorreta: 'terceiro grau',
    explicacao: 'A escala MENOR tem o 3¬∫ GRAU REBAIXADO (um semitom abaixo)! √â o que d√° aquele som mais "triste". Compare: D√≥-Mi (maior) vs D√≥-Mi‚ô≠ (menor). üéº'
  },
  'quais s√£o os tipos de escala menor': {
    respostaCorreta: 'menor natural, menor harm√¥nica e menor mel√≥dica',
    explicacao: 'Existem 3 tipos de escala MENOR: Natural (escala pura), Harm√¥nica (7¬∫ grau elevado), Mel√≥dica (6¬∫ e 7¬∫ elevados na subida). üéµ'
  },
  
  // ACORDES
  'o que √© um acorde': {
    respostaCorreta: 'tr√™s ou mais notas',
    explicacao: 'ACORDE = 3 ou mais notas tocadas AO MESMO TEMPO! Cria harmonia. Exemplo: D√≥+Mi+Sol = acorde de D√≥ maior. üé∏'
  },
  'qual √© a estrutura b√°sica de um acorde maior': {
    respostaCorreta: 't√¥nica, ter√ßa maior e quinta justa',
    explicacao: 'Acorde MAIOR = Fundamental + Ter√ßa Maior + Quinta Justa! Exemplo: D√≥ maior = D√≥ (1¬™) + Mi (3¬™ maior) + Sol (5¬™). Som alegre! üòäüéµ'
  },
  'qual √© a estrutura b√°sica de um acorde menor': {
    respostaCorreta: 't√¥nica, ter√ßa menor e quinta justa',
    explicacao: 'Acorde MENOR = Fundamental + Ter√ßa Menor + Quinta Justa! Exemplo: D√≥ menor = D√≥ + Mi‚ô≠ + Sol. Som mais triste. üòîüéµ'
  },
  
  // TR√çADES
  'o que √© uma tr√≠ade': {
    respostaCorreta: 'acorde formado por tr√™s notas',
    explicacao: 'TR√çADE = acorde de 3 NOTAS! √â a forma mais b√°sica de acorde. Exemplo: D√≥-Mi-Sol. ‚ñ≤'
  },
  'quais s√£o os tipos b√°sicos de tr√≠ades': {
    respostaCorreta: 'maior, menor, aumentada e diminuta',
    explicacao: 'Existem 4 tipos de TR√çADES: Maior (alegre), Menor (triste), Aumentada (tensa), Diminuta (muito tensa). üéµ'
  },
  'como √© formada uma tr√≠ade de d√≥ maior': {
    respostaCorreta: 'd√≥, mi, sol',
    explicacao: 'Tr√≠ade de D√≥ MAIOR = D√≥ + Mi + Sol! √â a fundamental (1¬™), ter√ßa maior (3¬™) e quinta justa (5¬™). üéπ'
  },
  
  // FUN√á√ïES HARM√îNICAS
  'qual acorde tem fun√ß√£o de t√¥nica em uma tonalidade maior': {
    respostaCorreta: 'primeiro grau',
    explicacao: 'T√îNICA = acorde do I GRAU (primeiro)! √â o acorde de repouso, o "lar" da m√∫sica. Em D√≥ maior, a t√¥nica √© o acorde de D√≥. üè†'
  },
  'qual acorde tem fun√ß√£o de dominante em uma tonalidade maior': {
    respostaCorreta: 'quinto grau',
    explicacao: 'DOMINANTE = acorde do V GRAU (quinto)! Cria tens√£o e quer voltar pra t√¥nica. Em D√≥ maior, a dominante √© Sol. ‚ö°'
  },
  'qual acorde tem fun√ß√£o de subdominante em uma tonalidade maior': {
    respostaCorreta: 'quarto grau',
    explicacao: 'SUBDOMINANTE = acorde do IV GRAU (quarto)! Prepara a dominante. Em D√≥ maior, a subdominante √© F√°. üéµ'
  },
  
  // CAD√äNCIAS
  'o que √© uma cad√™ncia musical': {
    respostaCorreta: 'sequ√™ncia de acordes',
    explicacao: 'CAD√äNCIA = sequ√™ncia de acordes que FINALIZA uma frase musical! √â como a "pontua√ß√£o" da m√∫sica. üéµ.'
  },
  'o que √© uma cad√™ncia perfeita': {
    respostaCorreta: 'v para i',
    explicacao: 'Cad√™ncia PERFEITA = V ‚Üí I (dominante para t√¥nica)! √â a finaliza√ß√£o mais forte. Exemplo: Sol ‚Üí D√≥. Som de "fim"! üéØ'
  },
  'o que √© uma cad√™ncia plagal': {
    respostaCorreta: 'iv para i',
    explicacao: 'Cad√™ncia PLAGAL = IV ‚Üí I (subdominante para t√¥nica)! Conhecida como cad√™ncia "Am√©m" usada em igrejas. Exemplo: F√° ‚Üí D√≥. üôè'
  }
};

// Fun√ß√£o para normalizar texto (remover acentos, pontua√ß√£o, etc)
const normalizarTexto = (texto) => {
  return texto
    .toLowerCase()
    .normalize('NFD')
    .replace(/[\u0300-\u036f]/g, '') // Remove acentos
    .replace(/[^\w\s]/g, '') // Remove pontua√ß√£o
    .trim();
};

// Fun√ß√£o para verificar se uma op√ß√£o cont√©m a resposta correta
const opcaoContemResposta = (opcao, respostaCorreta) => {
  const opcaoNorm = normalizarTexto(opcao);
  const respostaNorm = normalizarTexto(respostaCorreta);
  
  // Verificar se cont√©m a resposta ou palavras-chave
  if (opcaoNorm.includes(respostaNorm)) return true;
  
  // Verificar varia√ß√µes
  const palavrasResposta = respostaNorm.split(' ');
  const palavrasOpcao = opcaoNorm.split(' ');
  
  // Se todas as palavras da resposta est√£o na op√ß√£o
  return palavrasResposta.every(palavra => 
    palavrasOpcao.some(pOpcao => pOpcao.includes(palavra) || palavra.includes(pOpcao))
  );
};

// Fun√ß√£o principal de corre√ß√£o
const corrigirTodosQuizzes = async () => {
  try {
    console.log('üîß CORRE√á√ÉO FOR√áADA DE TODOS OS QUIZZES');
    console.log('Corrigindo automaticamente com base em teoria musical\n');
    console.log('=' .repeat(80) + '\n');
    
    const quizzes = await Quiz.find({});
    let totalCorrigido = 0;
    let totalNaoEncontrado = 0;
    const naoCorrigidos = [];
    
    for (const quiz of quizzes) {
      let quizModificado = false;
      
      for (let i = 0; i < quiz.questions.length; i++) {
        const questao = quiz.questions[i];
        const perguntaNorm = normalizarTexto(questao.question);
        
        // Procurar corre√ß√£o correspondente
        let correcaoEncontrada = null;
        for (const [chavePergunta, dadosCorrecao] of Object.entries(CORRECOES)) {
          if (perguntaNorm.includes(normalizarTexto(chavePergunta))) {
            correcaoEncontrada = dadosCorrecao;
            break;
          }
        }
        
        if (correcaoEncontrada) {
          // Encontrar a op√ß√£o que cont√©m a resposta correta
          let indiceCorreto = -1;
          
          for (let j = 0; j < questao.options.length; j++) {
            if (opcaoContemResposta(questao.options[j].label, correcaoEncontrada.respostaCorreta)) {
              indiceCorreto = j;
              break;
            }
          }
          
          if (indiceCorreto !== -1) {
            // Verificar se j√° est√° correta
            const jaCorreto = questao.options[indiceCorreto].isCorrect;
            
            if (!jaCorreto) {
              console.log(`\n‚úÖ Quiz: "${quiz.title}"`);
              console.log(`   Quest√£o: "${questao.question}"`);
              console.log(`   Resposta correta: "${questao.options[indiceCorreto].label}"\n`);
              
              // Marcar todas como incorretas
              questao.options.forEach((opt, idx) => {
                quiz.questions[i].options[idx].isCorrect = false;
              });
              
              // Marcar a correta
              quiz.questions[i].options[indiceCorreto].isCorrect = true;
              quiz.questions[i].explanation = correcaoEncontrada.explicacao;
              
              quizModificado = true;
              totalCorrigido++;
            }
          } else {
            console.log(`\n‚ö†Ô∏è  N√£o encontrei op√ß√£o correta para: "${questao.question}"`);
            console.log(`   Op√ß√µes dispon√≠veis:`);
            questao.options.forEach((opt, idx) => {
              console.log(`   ${idx}. ${opt.label}`);
            });
            totalNaoEncontrado++;
            naoCorrigidos.push({
              quiz: quiz.title,
              questao: questao.question
            });
          }
        }
      }
      
      // Salvar se modificado
      if (quizModificado) {
        await quiz.save();
        console.log(`   üíæ Quiz salvo!`);
      }
    }
    
    // Relat√≥rio final
    console.log('\n' + '='.repeat(80));
    console.log('üìä RELAT√ìRIO FINAL DA CORRE√á√ÉO');
    console.log('='.repeat(80));
    console.log(`\n‚úÖ Quest√µes corrigidas: ${totalCorrigido}`);
    console.log(`‚ö†Ô∏è  Quest√µes n√£o encontradas/corrigidas: ${totalNaoEncontrado}`);
    
    if (naoCorrigidos.length > 0) {
      console.log(`\n\nüîç QUEST√ïES QUE PRECISAM DE REVIS√ÉO MANUAL:\n`);
      naoCorrigidos.forEach((item, idx) => {
        console.log(`${idx + 1}. Quiz: "${item.quiz}"`);
        console.log(`   Quest√£o: "${item.questao}"\n`);
      });
    }
    
    console.log('\n' + '='.repeat(80) + '\n');
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir quizzes:', error);
  }
};

// Executar o script
const main = async () => {
  try {
    await connectDB();
    await corrigirTodosQuizzes();
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erro fatal durante a execu√ß√£o:', error);
    process.exit(1);
  }
};

// Iniciar o script
main();

