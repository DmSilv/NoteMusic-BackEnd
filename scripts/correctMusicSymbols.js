const mongoose = require('mongoose');
require('dotenv').config();

const Module = require('../src/models/Module');
const Quiz = require('../src/models/Quiz');

// Conectar ao banco
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB');
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    process.exit(1);
  }
};

/**
 * Fun√ß√£o para verificar e corrigir conte√∫dos de perguntas no banco de dados
 * Especificamente corrige a quest√£o do crescendo/diminuendo
 */
const checkAndCorrectQuestions = async () => {
  try {
    console.log('üîç Verificando todas as perguntas sobre crescendo/diminuendo no banco de dados...');
    
    // Buscar quizzes
    const quizzes = await Quiz.find({});
    console.log(`üìä Total de quizzes encontrados: ${quizzes.length}`);
    
    let totalQuestionsChecked = 0;
    let questionsFixed = 0;
    
    // Para cada quiz, verificar quest√µes sobre crescendo/diminuendo
    for (const quiz of quizzes) {
      let quizModified = false;
      
      // Verificar cada quest√£o
      for (let i = 0; i < quiz.questions.length; i++) {
        const question = quiz.questions[i];
        totalQuestionsChecked++;
        
        // Verificar se √© uma quest√£o sobre crescendo/diminuendo
        const isCrescendoQuestion = 
          question.question.includes('crescendo') || 
          question.question.includes('Crescendo') ||
          question.question.toLowerCase().includes('forte') ||
          question.question.toLowerCase().includes('piano') || 
          question.question.toLowerCase().includes('intensidade');
        
        if (isCrescendoQuestion) {
          console.log(`\n‚ö†Ô∏è Quest√£o potencial encontrada (Quiz: ${quiz.title}):`);
          console.log(`   Pergunta: ${question.question}`);
          
          // Verificar op√ß√µes
          let foundCorrection = false;
          for (let j = 0; j < question.options.length; j++) {
            const option = question.options[j];
            
            // Verificar se a op√ß√£o menciona crescendo ou diminuendo
            if (option.label.includes('Crescendo') || option.label.includes('crescendo') || 
                option.label.includes('Diminuendo') || option.label.includes('diminuendo')) {
              
              console.log(`   Op√ß√£o: ${option.label} (${option.isCorrect ? 'Correta' : 'Incorreta'})`);
              
              // Verificar se o crescendo e diminuendo est√£o corretos
              if (option.label.includes('Crescendo (<)') && !option.isCorrect) {
                console.log('   ‚ö†Ô∏è Erro encontrado! Crescendo (<) est√° marcado como incorreto quando deveria ser correto');
                quiz.questions[i].options[j].isCorrect = true;
                foundCorrection = true;
              }
              else if (option.label.includes('Crescendo (>)')) {
                console.log('   ‚ö†Ô∏è Erro encontrado! Crescendo est√° com o s√≠mbolo errado (> em vez de <)');
                quiz.questions[i].options[j].label = option.label.replace('Crescendo (>)', 'Crescendo (<)');
                foundCorrection = true;
              }
              else if (option.label.includes('Diminuendo (<)')) {
                console.log('   ‚ö†Ô∏è Erro encontrado! Diminuendo est√° com o s√≠mbolo errado (< em vez de >)');
                quiz.questions[i].options[j].label = option.label.replace('Diminuendo (<)', 'Diminuendo (>)');
                foundCorrection = true;
              }
            }
          }
          
          if (foundCorrection) {
            questionsFixed++;
            quizModified = true;
          }
        }
      }
      
      // Salvar quiz se foi modificado
      if (quizModified) {
        await quiz.save();
        console.log(`‚úÖ Quiz "${quiz.title}" atualizado com corre√ß√µes`);
      }
    }
    
    console.log('\nüìä Resumo da verifica√ß√£o:');
    console.log(`   Total de quizzes verificados: ${quizzes.length}`);
    console.log(`   Total de quest√µes verificadas: ${totalQuestionsChecked}`);
    console.log(`   Quest√µes corrigidas: ${questionsFixed}`);
    
    if (questionsFixed === 0) {
      console.log('‚úÖ N√£o foram encontrados erros na simbologia musical das quest√µes!');
    } else {
      console.log(`‚úÖ ${questionsFixed} quest√µes foram corrigidas com sucesso!`);
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar e corrigir quest√µes:', error);
  }
};

/**
 * Verificar a consist√™ncia das perguntas e respostas
 */
const checkResponseConsistency = async () => {
  try {
    console.log('\nüîç Verificando consist√™ncia entre perguntas e respostas...');
    
    // Buscar todos os quizzes
    const quizzes = await Quiz.find({});
    
    let totalQuestions = 0;
    let totalNoCorrectAnswer = 0;
    let totalMultipleCorrectAnswers = 0;
    let fixedQuestions = 0;
    
    for (const quiz of quizzes) {
      let quizModified = false;
      
      // Para cada pergunta no quiz
      for (let i = 0; i < quiz.questions.length; i++) {
        const question = quiz.questions[i];
        totalQuestions++;
        
        // Verificar quantas respostas corretas existem
        const correctOptions = question.options.filter(opt => opt.isCorrect === true);
        const correctCount = correctOptions.length;
        
        if (correctCount === 0) {
          console.log(`\n‚ö†Ô∏è ERRO: Quest√£o sem resposta correta (Quiz: ${quiz.title}):`);
          console.log(`   Pergunta: ${question.question}`);
          totalNoCorrectAnswer++;
          
          // Tentar determinar a resposta correta com base em dicas
          const questionText = question.question.toLowerCase();
          const explanation = question.explanation?.toLowerCase() || '';
          
          // Para cada op√ß√£o, avaliar se poderia ser a resposta correta
          let bestOptionIndex = -1;
          let bestOptionScore = -1;
          
          for (let j = 0; j < question.options.length; j++) {
            const option = question.options[j];
            let score = 0;
            const optionText = option.label.toLowerCase();
            
            // Verificar se a op√ß√£o tem palavras-chave que correspondem √† pergunta ou explica√ß√£o
            if ((questionText.includes('altura') || explanation.includes('altura')) && optionText.includes('altura')) score += 2;
            if ((questionText.includes('intensidade') || explanation.includes('intensidade')) && optionText.includes('intensidade')) score += 2;
            if ((questionText.includes('timbre') || explanation.includes('timbre')) && optionText.includes('timbre')) score += 2;
            if ((questionText.includes('dura√ß√£o') || explanation.includes('dura√ß√£o')) && optionText.includes('dura√ß√£o')) score += 2;
            
            // Se a pergunta √© sobre sons graves/agudos, a resposta provavelmente √© altura
            if ((questionText.includes('grave') || questionText.includes('agudo')) && optionText.includes('altura')) score += 3;
            
            // Se a pergunta √© sobre forte/suave, a resposta provavelmente √© intensidade
            if ((questionText.includes('forte') || questionText.includes('suave') || questionText.includes('piano')) && 
                (optionText.includes('intensidade') || optionText.includes('forte') || optionText.includes('piano'))) score += 3;
            
            // Se a pergunta √© sobre diferen√ßas entre instrumentos, a resposta provavelmente √© timbre
            if ((questionText.includes('instrumento') || questionText.includes('violino') || questionText.includes('piano')) && 
                optionText.includes('timbre')) score += 3;
            
            // Se a pergunta √© sobre tempo/dura√ß√£o, a resposta provavelmente √© dura√ß√£o
            if ((questionText.includes('tempo') || questionText.includes('dura')) && optionText.includes('dura√ß√£o')) score += 3;
            
            if (score > bestOptionScore) {
              bestOptionScore = score;
              bestOptionIndex = j;
            }
          }
          
          // Se encontramos uma op√ß√£o com alta pontua√ß√£o, marcar como correta
          if (bestOptionIndex >= 0 && bestOptionScore >= 2) {
            console.log(`   ‚úÖ Prov√°vel resposta correta: "${question.options[bestOptionIndex].label}" (pontua√ß√£o: ${bestOptionScore})`);
            quiz.questions[i].options[bestOptionIndex].isCorrect = true;
            fixedQuestions++;
            quizModified = true;
          } else {
            console.log(`   ‚ùå N√£o foi poss√≠vel determinar a resposta correta automaticamente`);
          }
        }
        else if (correctCount > 1) {
          console.log(`\n‚ö†Ô∏è AVISO: Quest√£o com ${correctCount} respostas corretas (Quiz: ${quiz.title}):`);
          console.log(`   Pergunta: ${question.question}`);
          totalMultipleCorrectAnswers++;
          
          // Se n√£o √© uma quest√£o de m√∫ltipla escolha, deixar apenas a primeira resposta correta
          const explanation = question.explanation?.toLowerCase() || '';
          if (!explanation.includes('m√∫ltipla') && !explanation.includes('multipla') && 
              !questionText.includes('m√∫ltipla') && !questionText.includes('multipla')) {
            
            let foundCorrect = false;
            for (let j = 0; j < question.options.length; j++) {
              if (quiz.questions[i].options[j].isCorrect) {
                if (foundCorrect) {
                  console.log(`   ‚úÖ Desabilitando resposta extra: "${question.options[j].label}"`);
                  quiz.questions[i].options[j].isCorrect = false;
                  quizModified = true;
                  fixedQuestions++;
                } else {
                  console.log(`   ‚úÖ Mantendo resposta correta: "${question.options[j].label}"`);
                  foundCorrect = true;
                }
              }
            }
          }
        }
      }
      
      // Salvar quiz se modificado
      if (quizModified) {
        await quiz.save();
        console.log(`‚úÖ Quiz "${quiz.title}" atualizado com corre√ß√µes de consist√™ncia`);
      }
    }
    
    console.log('\nüìä Resumo da verifica√ß√£o de consist√™ncia:');
    console.log(`   Total de quest√µes verificadas: ${totalQuestions}`);
    console.log(`   Quest√µes sem resposta correta: ${totalNoCorrectAnswer}`);
    console.log(`   Quest√µes com m√∫ltiplas respostas corretas: ${totalMultipleCorrectAnswers}`);
    console.log(`   Quest√µes corrigidas: ${fixedQuestions}`);
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar consist√™ncia de respostas:', error);
  }
};

// Executar o script
const main = async () => {
  try {
    await connectDB();
    
    // Verificar e corrigir quest√µes com s√≠mbolos incorretos
    await checkAndCorrectQuestions();
    
    // Verificar consist√™ncia de perguntas/respostas
    await checkResponseConsistency();
    
    console.log('\n‚ú® Verifica√ß√£o e corre√ß√£o conclu√≠das!');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erro fatal durante a execu√ß√£o:', error);
    process.exit(1);
  }
};

// Iniciar o script
main();





























