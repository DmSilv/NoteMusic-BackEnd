const mongoose = require('mongoose');
require('dotenv').config();

const Quiz = require('../src/models/Quiz');

// Conectar ao banco
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB\n');
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    process.exit(1);
  }
};

// Perguntas melhoradas (l√∫dicas e claras)
const PERGUNTAS_MELHORADAS = {
  // REMOVER S√çMBOLOS DAS PERGUNTAS
  'crescendo': {
    antigas: [
      'De acordo com os princ√≠pios da m√∫sica, o que significa o s√≠mbolo de crescendo (<) na partitura?',
      'O que significa o s√≠mbolo de crescendo (<) na partitura?',
      'o que significa o s√≠mbolo de crescendo (<)'
    ],
    nova: 'üéµ Quando voc√™ v√™ um sinal de "crescendo" na partitura, o que o m√∫sico deve fazer?',
    opcoes: [
      { label: 'Diminuir gradualmente o volume', isCorrect: false },
      { label: 'Aumentar gradualmente o volume', isCorrect: true },
      { label: 'Tocar mais agudo', isCorrect: false },
      { label: 'Tocar mais devagar', isCorrect: false }
    ],
    explicacao: 'Crescendo (s√≠mbolo <) significa aumentar gradualmente o VOLUME (intensidade) da m√∫sica. √â como aumentar o volume da TV aos poucos! üì¢'
  },
  
  // CORRIGIR PIANO (P) - N√ÉO √â FORTE (F)
  'piano': {
    antigas: [
      'Qual s√≠mbolo indica que devemos tocar suavemente?',
      's√≠mbolo musical indica que devemos tocar suavemente',
      'tocar suavemente'
    ],
    nova: 'üéπ Na partitura, qual letra indica que devemos tocar BAIXINHO?',
    opcoes: [
      { label: 'f (forte)', isCorrect: false },
      { label: 'p (piano)', isCorrect: true },
      { label: 'm (mezzo)', isCorrect: false },
      { label: 'c (crescendo)', isCorrect: false }
    ],
    explicacao: 'A letra "p" significa "piano" em italiano, que quer dizer SUAVE/BAIXINHO. J√° "f" significa "forte" (alto). üîâ'
  },
  
  // MELHORAR ALTURA
  'altura': {
    antigas: [
      'O que √© a altura do som?',
      'Qual propriedade do som est√° relacionada √† frequ√™ncia',
      'altura do som'
    ],
    nova: 'üéº Quando dizemos que um som √© "grave" ou "agudo", estamos falando sobre qual propriedade?',
    opcoes: [
      { label: 'Intensidade', isCorrect: false },
      { label: 'Altura', isCorrect: true },
      { label: 'Timbre', isCorrect: false },
      { label: 'Dura√ß√£o', isCorrect: false }
    ],
    explicacao: 'ALTURA √© a propriedade que torna o som grave (baixo, como voz de homem) ou agudo (alto, como voz de crian√ßa). Sons graves t√™m frequ√™ncia baixa e sons agudos t√™m frequ√™ncia alta. üéµ'
  },
  
  // MELHORAR INTENSIDADE
  'intensidade': {
    antigas: [
      'O que √© a intensidade do som?',
      'Qual propriedade distingue sons fortes de fracos',
      'intensidade do som'
    ],
    nova: 'üîä Quando dizemos que um som est√° "alto" ou "baixo" (volume), estamos falando sobre qual propriedade?',
    opcoes: [
      { label: 'Altura', isCorrect: false },
      { label: 'Intensidade', isCorrect: true },
      { label: 'Timbre', isCorrect: false },
      { label: 'Dura√ß√£o', isCorrect: false }
    ],
    explicacao: 'INTENSIDADE √© o VOLUME do som. Som forte (alto) tem muita intensidade, som fraco (baixo) tem pouca intensidade. √â como o volume do r√°dio! üìª'
  },
  
  // MELHORAR TIMBRE
  'timbre': {
    antigas: [
      'O que √© o timbre do som?',
      'Qual propriedade permite distinguir diferentes instrumentos',
      'timbre do som',
      'qualidade sonora'
    ],
    nova: 'üé∏ Como conseguimos diferenciar o som de um viol√£o do som de um piano, mesmo tocando a mesma nota?',
    opcoes: [
      { label: 'Pela altura do som', isCorrect: false },
      { label: 'Pelo timbre (qualidade sonora)', isCorrect: true },
      { label: 'Pela intensidade do som', isCorrect: false },
      { label: 'Pela dura√ß√£o do som', isCorrect: false }
    ],
    explicacao: 'TIMBRE √© a "cor do som", a caracter√≠stica que faz cada instrumento ter seu som √∫nico! √â por isso que voc√™ reconhece a voz da sua m√£e ao telefone. üé≠'
  },
  
  // MELHORAR DURA√á√ÉO
  'dura√ß√£o': {
    antigas: [
      'O que √© a dura√ß√£o do som?',
      'dura√ß√£o do som'
    ],
    nova: '‚è±Ô∏è Quando falamos se um som √© "curto" ou "longo", estamos falando sobre qual propriedade?',
    opcoes: [
      { label: 'Altura', isCorrect: false },
      { label: 'Intensidade', isCorrect: false },
      { label: 'Timbre', isCorrect: false },
      { label: 'Dura√ß√£o', isCorrect: true }
    ],
    explicacao: 'DURA√á√ÉO √© o tempo que o som permanece. Uma nota pode durar muito tempo (longa) ou pouco tempo (curta). ‚è∞'
  },
  
  // MELHORAR SEMIBREVE
  'semibreve': {
    antigas: [
      'Qual √© a dura√ß√£o de uma semibreve?',
      'semibreve'
    ],
    nova: 'üéµ A SEMIBREVE √© a nota mais longa! Quanto tempo ela dura em um compasso 4/4?',
    opcoes: [
      { label: '1 tempo', isCorrect: false },
      { label: '2 tempos', isCorrect: false },
      { label: '4 tempos (o compasso inteiro!)', isCorrect: true },
      { label: '8 tempos', isCorrect: false }
    ],
    explicacao: 'A semibreve (‚óã) dura 4 tempos! √â a nota mais longa e ocupa o compasso inteiro. Imagine contar 1-2-3-4 segurando uma nota s√≥! üé∂'
  },
  
  // MELHORAR COLCHEIA
  'colcheia': {
    antigas: [
      'Qual a figura musical que vale metade de uma sem√≠nima?',
      'colcheia'
    ],
    nova: '‚ô™ Se uma SEM√çNIMA vale 1 tempo, quanto vale uma COLCHEIA?',
    opcoes: [
      { label: '2 tempos', isCorrect: false },
      { label: '1 tempo', isCorrect: false },
      { label: 'Meio tempo (0,5)', isCorrect: true },
      { label: 'Um quarto de tempo', isCorrect: false }
    ],
    explicacao: 'A colcheia (‚ô™) vale METADE de uma sem√≠nima! Se a sem√≠nima √© 1 tempo, a colcheia √© meio tempo. Duas colcheias = uma sem√≠nima! ‚ô™‚ô™'
  }
};

// Fun√ß√£o para melhorar as perguntas
const melhorarPerguntas = async () => {
  try {
    console.log('üé® MELHORANDO PERGUNTAS DO QUIZ\n');
    console.log('Tornando as perguntas mais l√∫dicas e claras para os alunos!\n');
    console.log('=' .repeat(80) + '\n');
    
    const quizzes = await Quiz.find({});
    let totalMelhorado = 0;
    let totalCorrigido = 0;
    
    for (const quiz of quizzes) {
      let quizModificado = false;
      
      for (let i = 0; i < quiz.questions.length; i++) {
        const questao = quiz.questions[i];
        const perguntaOriginal = questao.question;
        const perguntaLower = perguntaOriginal.toLowerCase();
        
        // Verificar cada tipo de melhoria
        for (const [conceito, melhoria] of Object.entries(PERGUNTAS_MELHORADAS)) {
          // Verificar se a pergunta atual √© sobre este conceito
          const corresponde = melhoria.antigas.some(antiga => 
            perguntaLower.includes(antiga.toLowerCase())
          );
          
          if (corresponde) {
            console.log(`\nüìù Quiz: "${quiz.title}"`);
            console.log(`   Quest√£o ${i + 1} sobre: ${conceito.toUpperCase()}`);
            console.log(`\n   ANTES: "${perguntaOriginal}"`);
            console.log(`   DEPOIS: "${melhoria.nova}"\n`);
            
            // Atualizar a pergunta
            quiz.questions[i].question = melhoria.nova;
            quiz.questions[i].explanation = melhoria.explicacao;
            
            // Atualizar as op√ß√µes
            quiz.questions[i].options = melhoria.opcoes.map((opt, idx) => ({
              id: `opt_${i}_${idx}`,
              label: opt.label,
              isCorrect: opt.isCorrect,
              explanation: opt.isCorrect ? melhoria.explicacao : ''
            }));
            
            quizModificado = true;
            totalMelhorado++;
            break;
          }
        }
        
        // REMOVER S√çMBOLOS PROBLEM√ÅTICOS DAS PERGUNTAS
        let perguntaAtual = quiz.questions[i].question;
        let simbolosRemovidos = false;
        
        // Remover < e > das perguntas (n√£o das op√ß√µes!)
        if (perguntaAtual.includes('<') || perguntaAtual.includes('>')) {
          perguntaAtual = perguntaAtual.replace(/\(<\)/g, '');
          perguntaAtual = perguntaAtual.replace(/\(>\)/g, '');
          perguntaAtual = perguntaAtual.replace(/<|>/g, '');
          perguntaAtual = perguntaAtual.trim();
          simbolosRemovidos = true;
        }
        
        // Remover emojis confusos
        if (perguntaAtual.includes('ü•Å') || perguntaAtual.includes('üéµ') && !perguntaAtual.startsWith('üéµ')) {
          perguntaAtual = perguntaAtual.replace('ü•Å', 'üéµ');
          simbolosRemovidos = true;
        }
        
        if (simbolosRemovidos) {
          console.log(`\nüîß Removendo s√≠mbolos confusos:`);
          console.log(`   De: "${quiz.questions[i].question}"`);
          console.log(`   Para: "${perguntaAtual}"`);
          
          quiz.questions[i].question = perguntaAtual;
          quizModificado = true;
          totalCorrigido++;
        }
        
        // ADICIONAR EXPLICA√á√ïES SE FALTAREM
        if (!quiz.questions[i].explanation || quiz.questions[i].explanation.trim() === '') {
          // Tentar adicionar explica√ß√£o b√°sica baseada no conceito
          const pergunta = quiz.questions[i].question.toLowerCase();
          
          if (pergunta.includes('semibreve')) {
            quiz.questions[i].explanation = 'A semibreve √© a nota de maior dura√ß√£o, valendo 4 tempos.';
            quizModificado = true;
          } else if (pergunta.includes('m√≠nima')) {
            quiz.questions[i].explanation = 'A m√≠nima vale 2 tempos, metade de uma semibreve.';
            quizModificado = true;
          } else if (pergunta.includes('sem√≠nima')) {
            quiz.questions[i].explanation = 'A sem√≠nima vale 1 tempo em compassos quatern√°rios.';
            quizModificado = true;
          } else if (pergunta.includes('colcheia')) {
            quiz.questions[i].explanation = 'A colcheia vale meio tempo, metade de uma sem√≠nima.';
            quizModificado = true;
          } else if (pergunta.includes('pauta') || pergunta.includes('pentagrama')) {
            quiz.questions[i].explanation = 'A pauta musical possui 5 linhas e 4 espa√ßos onde escrevemos as notas.';
            quizModificado = true;
          } else if (pergunta.includes('d√≥ maior')) {
            quiz.questions[i].explanation = 'A escala de D√≥ maior: D√≥, R√©, Mi, F√°, Sol, L√°, Si (sem acidentes).';
            quizModificado = true;
          } else if (pergunta.includes('ter√ßa maior')) {
            quiz.questions[i].explanation = 'A ter√ßa maior √© o intervalo de 2 tons (4 semitons). Exemplo: D√≥-Mi.';
            quizModificado = true;
          } else if (pergunta.includes('quinta justa')) {
            quiz.questions[i].explanation = 'A quinta justa √© o intervalo de 3,5 tons (7 semitons). Exemplo: D√≥-Sol.';
            quizModificado = true;
          } else if (pergunta.includes('acorde maior')) {
            quiz.questions[i].explanation = 'Acorde maior = fundamental + ter√ßa maior + quinta justa.';
            quizModificado = true;
          } else if (pergunta.includes('acorde menor')) {
            quiz.questions[i].explanation = 'Acorde menor = fundamental + ter√ßa menor + quinta justa.';
            quizModificado = true;
          } else if (pergunta.includes('t√¥nica')) {
            quiz.questions[i].explanation = 'A t√¥nica √© o acorde do I grau, que d√° sensa√ß√£o de repouso.';
            quizModificado = true;
          } else if (pergunta.includes('dominante')) {
            quiz.questions[i].explanation = 'A dominante √© o acorde do V grau, que cria tens√£o.';
            quizModificado = true;
          } else if (pergunta.includes('subdominante')) {
            quiz.questions[i].explanation = 'A subdominante √© o acorde do IV grau.';
            quizModificado = true;
          }
        }
      }
      
      // Salvar se modificado
      if (quizModificado) {
        await quiz.save();
        console.log(`\n   üíæ Quiz salvo com melhorias!\n`);
        console.log('-'.repeat(80));
      }
    }
    
    // Relat√≥rio final
    console.log('\n' + '='.repeat(80));
    console.log('üìä RELAT√ìRIO FINAL');
    console.log('='.repeat(80));
    console.log(`\n‚úÖ Perguntas reescritas de forma l√∫dica: ${totalMelhorado}`);
    console.log(`üîß Perguntas com s√≠mbolos removidos: ${totalCorrigido}`);
    console.log(`\nüéâ Quizzes agora est√£o mais claros e did√°ticos!`);
    console.log('\n' + '='.repeat(80) + '\n');
    
  } catch (error) {
    console.error('‚ùå Erro ao melhorar perguntas:', error);
  }
};

// Executar o script
const main = async () => {
  try {
    await connectDB();
    await melhorarPerguntas();
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erro fatal durante a execu√ß√£o:', error);
    process.exit(1);
  }
};

// Iniciar o script
main();

