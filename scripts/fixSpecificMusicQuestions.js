const mongoose = require('mongoose');
require('dotenv').config();

const Quiz = require('../src/models/Quiz');

// Conectar ao banco
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB');
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    process.exit(1);
  }
};

// Corrigir perguntas espec√≠ficas de teoria musical
const fixSpecificMusicQuestions = async () => {
  try {
    console.log('üîß Iniciando corre√ß√£o de perguntas espec√≠ficas de teoria musical...');
    
    // 1. Corrigir pergunta sobre a clave de Sol
    await fixClaveQuestion();
    
    // 2. Corrigir pergunta sobre a figura musical que vale metade de uma sem√≠nima
    await fixSemiminimQuestion();
    
    console.log('‚úÖ Corre√ß√µes espec√≠ficas conclu√≠das!');
  } catch (error) {
    console.error('‚ùå Erro ao corrigir perguntas espec√≠ficas:', error);
  }
};

// Corrigir a pergunta sobre a clave de Sol
const fixClaveQuestion = async () => {
  try {
    console.log('\nüîç Procurando pergunta sobre clave de Sol...');
    
    // Buscar quizzes de nota√ß√£o musical
    const quizzes = await Quiz.find({ 
      title: { $regex: /nota|clave|musical/i }
    });
    
    if (quizzes.length === 0) {
      console.log('‚ùå Nenhum quiz relacionado a nota√ß√£o musical encontrado');
      return;
    }
    
    console.log(`üìä Encontrados ${quizzes.length} quizzes potenciais`);
    
    let questionFixed = false;
    
    // Para cada quiz
    for (const quiz of quizzes) {
      console.log(`\nüéµ Analisando quiz: ${quiz.title}`);
      
      // Procurar a pergunta sobre clave de Sol
      const claveQuestionIndex = quiz.questions.findIndex(q => 
        q.question.toLowerCase().includes('clave de sol') && 
        q.question.toLowerCase().includes('localiza')
      );
      
      if (claveQuestionIndex === -1) {
        console.log('‚ùå Pergunta sobre clave de Sol n√£o encontrada neste quiz');
        continue;
      }
      
      const question = quiz.questions[claveQuestionIndex];
      console.log(`‚úÖ Pergunta encontrada: "${question.question}"`);
      
      // Verificar as op√ß√µes
      console.log('üìã Op√ß√µes atuais:');
      question.options.forEach((opt, i) => {
        console.log(`   ${i+1}. ${opt.label} (${opt.isCorrect ? '‚úì' : '‚úó'})`);
      });
      
      // Procurar a op√ß√£o "segunda linha"
      const segundaLinhaIndex = question.options.findIndex(opt => 
        opt.label.toLowerCase().includes('segunda linha') || 
        opt.label.toLowerCase().includes('2¬™ linha') ||
        opt.label.toLowerCase().includes('2a linha')
      );
      
      if (segundaLinhaIndex === -1) {
        console.log('‚ùå Op√ß√£o "segunda linha" n√£o encontrada');
        
        // Verificar se existe alguma op√ß√£o com "linha"
        const linhaIndex = question.options.findIndex(opt => 
          opt.label.toLowerCase().includes('linha')
        );
        
        if (linhaIndex !== -1) {
          console.log(`‚úÖ Encontrada op√ß√£o com "linha": "${question.options[linhaIndex].label}"`);
          
          // Corrigir para "segunda linha"
          quiz.questions[claveQuestionIndex].options[linhaIndex].label = "Na segunda linha";
          quiz.questions[claveQuestionIndex].options[linhaIndex].isCorrect = true;
          
          // Marcar as outras como incorretas
          for (let i = 0; i < question.options.length; i++) {
            if (i !== linhaIndex) {
              quiz.questions[claveQuestionIndex].options[i].isCorrect = false;
            }
          }
          
          await quiz.save();
          console.log('‚úÖ Op√ß√£o corrigida para "Na segunda linha" e marcada como correta');
          questionFixed = true;
        } else {
          // N√£o encontrou nenhuma op√ß√£o com "linha", criar uma nova
          console.log('üîß Criando nova op√ß√£o "Na segunda linha"');
          
          // Verificar se h√° op√ß√£o sobre espa√ßo
          const espacoIndex = question.options.findIndex(opt => 
            opt.label.toLowerCase().includes('espa√ßo') || 
            opt.label.toLowerCase().includes('espaco')
          );
          
          if (espacoIndex !== -1) {
            // Substituir a op√ß√£o de espa√ßo pela linha correta
            quiz.questions[claveQuestionIndex].options[espacoIndex].label = "Na segunda linha";
            quiz.questions[claveQuestionIndex].options[espacoIndex].isCorrect = true;
            
            // Marcar as outras como incorretas
            for (let i = 0; i < question.options.length; i++) {
              if (i !== espacoIndex) {
                quiz.questions[claveQuestionIndex].options[i].isCorrect = false;
              }
            }
            
            await quiz.save();
            console.log('‚úÖ Op√ß√£o de espa√ßo substitu√≠da por "Na segunda linha" e marcada como correta');
            questionFixed = true;
          }
        }
      } else {
        // Verificar se a op√ß√£o "segunda linha" j√° est√° marcada como correta
        if (question.options[segundaLinhaIndex].isCorrect) {
          console.log('‚úÖ Op√ß√£o "segunda linha" j√° est√° correta');
          questionFixed = true;
        } else {
          console.log('üîß Marcando op√ß√£o "segunda linha" como correta');
          
          // Marcar "segunda linha" como correta
          quiz.questions[claveQuestionIndex].options[segundaLinhaIndex].isCorrect = true;
          
          // Marcar as outras como incorretas
          for (let i = 0; i < question.options.length; i++) {
            if (i !== segundaLinhaIndex) {
              quiz.questions[claveQuestionIndex].options[i].isCorrect = false;
            }
          }
          
          await quiz.save();
          console.log('‚úÖ Op√ß√£o "segunda linha" marcada como correta');
          questionFixed = true;
        }
      }
      
      // Atualizar a explica√ß√£o
      if (questionFixed) {
        quiz.questions[claveQuestionIndex].explanation = 
          "A clave de Sol √© posicionada de modo que sua espiral circunde a segunda linha do pentagrama, indicando que ali est√° a nota Sol (G). Esta √© a clave mais comum para instrumentos de registro m√©dio-agudo como violino, flauta, trompete e a m√£o direita do piano.";
        
        await quiz.save();
        console.log('‚úÖ Explica√ß√£o atualizada');
      }
    }
    
    if (!questionFixed) {
      console.log('‚ùå N√£o foi poss√≠vel corrigir a pergunta sobre clave de Sol');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir pergunta sobre clave de Sol:', error);
  }
};

// Corrigir a pergunta sobre a figura musical que vale metade de uma sem√≠nima
const fixSemiminimQuestion = async () => {
  try {
    console.log('\nüîç Procurando pergunta sobre figura musical que vale metade de uma sem√≠nima...');
    
    // Buscar quizzes de figuras musicais
    const quizzes = await Quiz.find({ 
      title: { $regex: /figura|musical|nota/i }
    });
    
    if (quizzes.length === 0) {
      console.log('‚ùå Nenhum quiz relacionado a figuras musicais encontrado');
      return;
    }
    
    console.log(`üìä Encontrados ${quizzes.length} quizzes potenciais`);
    
    let questionFixed = false;
    
    // Para cada quiz
    for (const quiz of quizzes) {
      console.log(`\nüéµ Analisando quiz: ${quiz.title}`);
      
      // Procurar a pergunta sobre figura musical que vale metade de uma sem√≠nima
      const figuraQuestionIndex = quiz.questions.findIndex(q => 
        q.question.toLowerCase().includes('metade') && 
        q.question.toLowerCase().includes('sem√≠nima')
      );
      
      if (figuraQuestionIndex === -1) {
        console.log('‚ùå Pergunta sobre metade da sem√≠nima n√£o encontrada neste quiz');
        continue;
      }
      
      const question = quiz.questions[figuraQuestionIndex];
      console.log(`‚úÖ Pergunta encontrada: "${question.question}"`);
      
      // Verificar as op√ß√µes
      console.log('üìã Op√ß√µes atuais:');
      question.options.forEach((opt, i) => {
        console.log(`   ${i+1}. ${opt.label} (${opt.isCorrect ? '‚úì' : '‚úó'})`);
      });
      
      // Procurar a op√ß√£o "colcheia"
      const colcheiaIndex = question.options.findIndex(opt => 
        opt.label.toLowerCase().includes('colcheia')
      );
      
      if (colcheiaIndex === -1) {
        console.log('‚ùå Op√ß√£o "colcheia" n√£o encontrada');
      } else {
        // Verificar se a op√ß√£o "colcheia" j√° est√° marcada como correta
        if (question.options[colcheiaIndex].isCorrect) {
          console.log('‚úÖ Op√ß√£o "colcheia" j√° est√° correta');
          questionFixed = true;
        } else {
          console.log('üîß Marcando op√ß√£o "colcheia" como correta');
          
          // Marcar "colcheia" como correta
          quiz.questions[figuraQuestionIndex].options[colcheiaIndex].isCorrect = true;
          
          // Marcar as outras como incorretas
          for (let i = 0; i < question.options.length; i++) {
            if (i !== colcheiaIndex) {
              quiz.questions[figuraQuestionIndex].options[i].isCorrect = false;
            }
          }
          
          await quiz.save();
          console.log('‚úÖ Op√ß√£o "colcheia" marcada como correta');
          questionFixed = true;
        }
      }
      
      // Verificar se h√° op√ß√£o "fusa" incorretamente marcada como correta
      const fusaIndex = question.options.findIndex(opt => 
        opt.label.toLowerCase().includes('fusa')
      );
      
      if (fusaIndex !== -1 && question.options[fusaIndex].isCorrect) {
        console.log('üîß Corrigindo: op√ß√£o "fusa" estava incorretamente marcada como correta');
        quiz.questions[figuraQuestionIndex].options[fusaIndex].isCorrect = false;
        
        // Se n√£o encontrou colcheia, marcar a op√ß√£o correta
        if (colcheiaIndex === -1) {
          // Criar uma op√ß√£o "colcheia" se n√£o existir
          quiz.questions[figuraQuestionIndex].options.push({
            label: "Colcheia",
            isCorrect: true
          });
          console.log('‚úÖ Adicionada op√ß√£o "Colcheia" como correta');
        }
        
        await quiz.save();
        console.log('‚úÖ Corre√ß√£o aplicada: "fusa" desmarcada como correta');
        questionFixed = true;
      }
      
      // Atualizar a explica√ß√£o
      if (questionFixed) {
        quiz.questions[figuraQuestionIndex].explanation = 
          "A colcheia (eighth note) representa 1/2 tempo, metade da dura√ß√£o de uma sem√≠nima. √â identificada pela cabe√ßa preta com haste e uma bandeirola. Duas colcheias ligadas equivalem a uma sem√≠nima. A fusa vale 1/8 de tempo (1/4 de colcheia), e a semicolcheia vale 1/4 de tempo (1/2 de colcheia).";
        
        await quiz.save();
        console.log('‚úÖ Explica√ß√£o atualizada');
      }
    }
    
    if (!questionFixed) {
      console.log('‚ùå N√£o foi poss√≠vel corrigir a pergunta sobre figura musical');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir pergunta sobre figura musical:', error);
  }
};

// Executar o script
const main = async () => {
  try {
    await connectDB();
    await fixSpecificMusicQuestions();
    console.log('\n‚ú® Processo conclu√≠do!');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erro fatal durante a execu√ß√£o:', error);
    process.exit(1);
  }
};

// Iniciar o script
main();





























