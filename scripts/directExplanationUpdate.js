const mongoose = require('mongoose');
require('dotenv').config();

// Conectar ao banco
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB');
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    process.exit(1);
  }
};

// Conte√∫do te√≥rico refinado com explica√ß√µes detalhadas
const detailedExplanations = {
  "Propriedades do Som": [
    "A altura (pitch) √© a propriedade ac√∫stica relacionada √† frequ√™ncia das ondas sonoras. Quanto maior a frequ√™ncia, mais agudo √© o som; quanto menor, mais grave. √â medida em Hertz (Hz). Por exemplo, a nota L√° 440Hz √© o padr√£o de afina√ß√£o para orquestras.",
    "O timbre √© a qualidade sonora que permite distinguir sons da mesma altura e intensidade produzidos por fontes diferentes. √â determinado pelos harm√¥nicos (frequ√™ncias secund√°rias) que acompanham a frequ√™ncia fundamental. Cada instrumento possui um envelope sonoro √∫nico com ataque, sustenta√ß√£o e decaimento caracter√≠sticos.",
    "Na nota√ß√£o musical, 'p' (piano) indica que o som deve ser executado com baixa intensidade. A escala completa de din√¢micas vai de ppp (pianississimo - extremamente suave) a fff (fortississimo - extremamente forte). Estas indica√ß√µes italianas s√£o universalmente utilizadas na m√∫sica ocidental desde o per√≠odo barroco.",
    "A semibreve (whole note) √© a figura de maior dura√ß√£o no sistema moderno de nota√ß√£o musical, valendo 4 tempos em um compasso quatern√°rio (4/4). As demais figuras s√£o subdivis√µes dela: m√≠nima (2 tempos), sem√≠nima (1 tempo), colcheia (1/2 tempo), semicolcheia (1/4 tempo), fusa (1/8 tempo) e semifusa (1/16 tempo).",
    "O crescendo (<) √© uma indica√ß√£o de din√¢mica que orienta o m√∫sico a aumentar gradualmente a intensidade do som durante o trecho marcado. Seu oposto √© o diminuendo ou decrescendo (>), que indica redu√ß√£o gradual da intensidade. Estas indica√ß√µes s√£o essenciais para a expressividade musical, permitindo nuances na interpreta√ß√£o."
  ],
  "Nota√ß√£o Musical": [
    "O pentagrama (staff) padr√£o consiste em exatamente 5 linhas horizontais equidistantes e 4 espa√ßos entre elas. √â neste sistema que as notas musicais s√£o escritas, tanto nas linhas quanto nos espa√ßos. Quando necess√°rio, podem ser adicionadas linhas suplementares acima ou abaixo do pentagrama para acomodar notas mais agudas ou graves.",
    "A clave de Sol (G clef) √© posicionada de modo que sua espiral circunde a segunda linha do pentagrama, indicando que ali est√° a nota Sol (G). Esta √© a clave mais comum para instrumentos de registro m√©dio-agudo como violino, flauta, trompete e a m√£o direita do piano. A partir desta refer√™ncia, as outras notas s√£o posicionadas.",
    "A m√≠nima (half note) vale 2 tempos em um compasso simples. Representa metade da dura√ß√£o de uma semibreve (4 tempos) e o dobro de uma sem√≠nima (1 tempo). √â representada por uma nota com cabe√ßa branca e haste. Em compassos compostos, como 6/8, seu valor relativo se mant√©m, mas a unidade de tempo muda.",
    "A colcheia (eighth note) representa 1/2 tempo, metade da dura√ß√£o de uma sem√≠nima. √â identificada pela cabe√ßa preta com haste e uma bandeirola. Duas colcheias ligadas equivalem a uma sem√≠nima. Em nota√ß√£o r√≠tmica, oito colcheias preenchem um compasso 4/4. Quando agrupadas, suas hastes s√£o conectadas por uma barra horizontal.",
    "A fra√ß√£o 4/4 indica a f√≥rmula de compasso (time signature). O numerador (4) representa o n√∫mero de unidades de tempo por compasso, e o denominador (4) indica que a sem√≠nima √© a unidade de tempo. Tamb√©m conhecido como compasso quatern√°rio simples ou 'common time', pode ser representado pelo s√≠mbolo C. √â o compasso mais utilizado na m√∫sica ocidental."
  ],
  "Intervalos Musicais": [
    "O intervalo entre D√≥ e Mi √© uma 3¬™ maior, abrangendo 2 tons (ou 4 semitons). Na teoria musical ocidental, a 3¬™ maior √© um dos intervalos fundamentais para a constru√ß√£o de acordes maiores. Este intervalo tem uma qualidade sonora brilhante e est√°vel, sendo a base da sonoridade dos acordes maiores que transmitem sensa√ß√µes de alegria ou resolu√ß√£o.",
    "Na teoria tradicional, os intervalos de un√≠ssono, 4¬™ justa, 5¬™ justa e oitava s√£o considerados conson√¢ncias perfeitas. A 5¬™ justa (7 semitons) √© especialmente importante na m√∫sica ocidental, sendo a base do ciclo de quintas e da rela√ß√£o entre t√¥nica e dominante. As conson√¢ncias perfeitas t√™m uma estabilidade ac√∫stica devido √† propor√ß√£o simples entre as frequ√™ncias das notas.",
    "Um intervalo de 3¬™ menor cont√©m 1,5 tons (ou 3 semitons). Exemplos incluem L√°-D√≥, Mi-Sol e Si-R√©. A 3¬™ menor √© fundamental para a constru√ß√£o de acordes menores e para definir o modo menor. Este intervalo possui uma qualidade sonora mais melanc√≥lica ou introspectiva em compara√ß√£o com a 3¬™ maior, sendo essencial para expressar emo√ß√µes como tristeza ou nostalgia na m√∫sica.",
    "O intervalo entre F√° e Si √© uma 4¬™ aumentada (3 tons ou 6 semitons), tamb√©m conhecido como tr√≠tono. Na m√∫sica medieval era chamado de 'diabolus in musica' (o diabo na m√∫sica) por sua disson√¢ncia. √â um intervalo sim√©trico que divide a oitava exatamente ao meio. Na harmonia funcional, o tr√≠tono presente no acorde dominante (entre a 3¬™ e a 7¬™) cria a tens√£o que busca resolu√ß√£o na t√¥nica.",
    "Na escala maior, o intervalo entre o 1¬∫ e o 5¬∫ graus √© sempre uma 5¬™ justa (7 semitons). Esta rela√ß√£o √© fundamental na harmonia tonal, estabelecendo a rela√ß√£o t√¥nica-dominante que define grande parte da m√∫sica ocidental. A progress√£o V-I (dominante-t√¥nica) √© considerada a mais forte resolu√ß√£o harm√¥nica, presente em praticamente todas as cad√™ncias conclusivas da m√∫sica cl√°ssica e popular."
  ],
  "Harmonia Avan√ßada": [
    "A modula√ß√£o por acorde piv√¥ √© uma t√©cnica de transi√ß√£o harm√¥nica onde um acorde que pertence simultaneamente a duas tonalidades diferentes √© usado como ponte para estabelecer a nova tonalidade. √â uma forma suave de modula√ß√£o muito utilizada na m√∫sica cl√°ssica. Por exemplo, o acorde de L√° menor pode funcionar como vi grau em D√≥ maior e como ii grau em Sol maior, servindo como piv√¥ entre estas tonalidades.",
    "O empr√©stimo modal consiste em utilizar acordes derivados de modos paralelos (que compartilham a mesma t√¥nica) dentro de uma tonalidade. Por exemplo, em D√≥ maior, usar o acorde de L√°b maior (VI grau do modo menor) cria uma sonoridade expressiva por empr√©stimo modal. Esta t√©cnica enriquece a paleta harm√¥nica, sendo muito utilizada na m√∫sica rom√¢ntica, no jazz e na m√∫sica popular para criar contrastes emocionais.",
    "A substitui√ß√£o trit√¥nica do V7 √© o acorde de s√©tima constru√≠do sobre o segundo grau abaixado (bII7). Por exemplo, em D√≥ maior, o G7 (V7) pode ser substitu√≠do pelo Db7 (bII7). Estes acordes compartilham as notas guia (3¬™ e 7¬™) e suas fundamentais est√£o separadas por um tr√≠tono. Esta substitui√ß√£o √© muito utilizada no jazz e na m√∫sica popular, especialmente em progress√µes II-V-I, criando movimento crom√°tico no baixo.",
    "A cad√™ncia aut√™ntica perfeita consiste na progress√£o V7-I (dominante para t√¥nica) com ambos os acordes em estado fundamental e com a t√¥nica na voz mais aguda do acorde final. √â considerada a cad√™ncia mais conclusiva na m√∫sica tonal, criando forte sensa√ß√£o de resolu√ß√£o e finaliza√ß√£o. Esta cad√™ncia √© frequentemente utilizada para encerrar frases musicais, se√ß√µes ou pe√ßas inteiras na m√∫sica cl√°ssica e popular.",
    "As extens√µes harm√¥nicas s√£o notas adicionadas al√©m da tr√≠ade b√°sica (como 7¬™, 9¬™, 11¬™ e 13¬™). S√£o muito utilizadas no jazz e na m√∫sica popular para criar sonoridades mais ricas e complexas. A harmoniza√ß√£o crom√°tica tamb√©m utiliza acordes com notas que n√£o pertencem √† tonalidade, criando tens√£o e colorido harm√¥nico. Estas t√©cnicas expandem as possibilidades expressivas dos acordes, permitindo nuances emocionais mais sofisticadas."
  ]
};

// Atualizar diretamente as explica√ß√µes no banco de dados
const updateExplanationsDirect = async () => {
  try {
    console.log('üîß Iniciando atualiza√ß√£o direta no banco de dados...');
    
    // Usar o driver MongoDB diretamente
    const db = mongoose.connection.db;
    
    // Atualizar cada quiz
    const quizTitles = [
      "Quiz - Propriedades do Som",
      "Quiz - Nota√ß√£o Musical B√°sica",
      "Quiz - Intervalos Musicais",
      "Quiz - Harmonia Avan√ßada"
    ];
    
    const quizTypes = [
      "Propriedades do Som",
      "Nota√ß√£o Musical",
      "Intervalos Musicais",
      "Harmonia Avan√ßada"
    ];
    
    // Para cada quiz
    for (let i = 0; i < quizTitles.length; i++) {
      const title = quizTitles[i];
      const type = quizTypes[i];
      const explanations = detailedExplanations[type];
      
      console.log(`\nüéµ Atualizando quiz: ${title}`);
      
      // Buscar o quiz
      const quiz = await db.collection('quizzes').findOne({ title });
      
      if (!quiz) {
        console.log(`‚ùå Quiz n√£o encontrado: ${title}`);
        continue;
      }
      
      // Atualizar cada quest√£o
      for (let j = 0; j < Math.min(quiz.questions.length, explanations.length); j++) {
        const updateResult = await db.collection('quizzes').updateOne(
          { _id: quiz._id, "questions._id": quiz.questions[j]._id },
          { $set: { "questions.$.explanation": explanations[j] } }
        );
        
        console.log(`   Quest√£o ${j+1}: ${updateResult.modifiedCount} documento atualizado`);
      }
      
      console.log(`‚úÖ Quiz atualizado: ${title}`);
    }
    
    console.log('\n‚úÖ Todas as explica√ß√µes foram atualizadas diretamente!');
    
  } catch (error) {
    console.error('‚ùå Erro ao atualizar explica√ß√µes:', error);
  }
};

// Verificar a consist√™ncia final
const verifyFinalState = async () => {
  try {
    console.log('\nüîç Verificando estado final dos quizzes...');
    
    // Usar o driver MongoDB diretamente
    const db = mongoose.connection.db;
    
    // Buscar todos os quizzes
    const quizzes = await db.collection('quizzes').find({}).toArray();
    console.log(`üìä Encontrados ${quizzes.length} quizzes no banco de dados`);
    
    let allCorrect = true;
    
    // Verificar cada quiz
    for (const quiz of quizzes) {
      console.log(`\nüìù Quiz: ${quiz.title}`);
      
      // Verificar cada quest√£o
      for (let i = 0; i < quiz.questions.length; i++) {
        const question = quiz.questions[i];
        
        // Contar op√ß√µes corretas
        const correctOptions = question.options.filter(opt => opt.isCorrect);
        const correctCount = correctOptions.length;
        
        // Verificar explica√ß√£o
        const hasExplanation = question.explanation && question.explanation.length > 20;
        
        // Log baseado no resultado
        if (correctCount !== 1 || !hasExplanation) {
          allCorrect = false;
          
          if (correctCount !== 1) {
            console.log(`‚ùå Quest√£o ${i+1} com ${correctCount} respostas corretas: "${question.question.substring(0, 40)}..."`);
          }
          
          if (!hasExplanation) {
            console.log(`‚ö†Ô∏è Quest√£o ${i+1} sem explica√ß√£o adequada: "${question.question.substring(0, 40)}..."`);
          }
        } else {
          console.log(`‚úÖ Quest√£o ${i+1}: "${question.question.substring(0, 40)}..." - OK`);
        }
      }
    }
    
    if (allCorrect) {
      console.log('\nüéâ Todos os quizzes est√£o corretamente configurados!');
    } else {
      console.log('\n‚ö†Ô∏è Ainda h√° quest√µes que precisam de aten√ß√£o!');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar estado final:', error);
  }
};

// Executar o script
const main = async () => {
  try {
    await connectDB();
    
    // Atualizar explica√ß√µes diretamente
    await updateExplanationsDirect();
    
    // Verificar estado final
    await verifyFinalState();
    
    console.log('\n‚ú® Processo conclu√≠do!');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erro fatal durante a execu√ß√£o:', error);
    process.exit(1);
  }
};

// Iniciar o script
main();

























