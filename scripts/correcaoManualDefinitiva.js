const mongoose = require('mongoose');
require('dotenv').config();

const Quiz = require('../src/models/Quiz');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB\n');
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    process.exit(1);
  }
};

// CORRE√á√ïES MANUAIS ESPEC√çFICAS - USANDO √çNDICE EXATO DAS OP√á√ïES
const corrigirManualmente = async () => {
  try {
    console.log('üîß CORRE√á√ÉO MANUAL DEFINITIVA\n');
    console.log('Corrigindo quest√µes espec√≠ficas com √≠ndices exatos\n');
    console.log('='.repeat(80) + '\n');
    
    let totalCorrigido = 0;
    
    // ==================== QUIZ APRENDIZ - PULSA√á√ÉO E TEMPO ====================
    let quiz = await Quiz.findOne({ title: /Quiz Aprendiz - PULSA√á√ÉO E TEMPO/i });
    if (quiz) {
      console.log('üìù Corrigindo: Quiz Aprendiz - PULSA√á√ÉO E TEMPO\n');
      
      // 1. O que √© a pulsa√ß√£o musical? (√çndice correto: batida regular)
      let questao = quiz.questions.find(q => q.question.toLowerCase().includes('o que √© a pulsa√ß√£o musical'));
      if (questao) {
        let indiceCorreto = questao.options.findIndex(opt => 
          opt.label.toLowerCase().includes('batida') && opt.label.toLowerCase().includes('regular')
        );
        if (indiceCorreto !== -1) {
          questao.options.forEach((opt, i) => opt.isCorrect = (i === indiceCorreto));
          questao.explanation = 'A pulsa√ß√£o √© a BATIDA REGULAR da m√∫sica, como as batidas do cora√ß√£o! üíì';
          totalCorrigido++;
          console.log(`   ‚úÖ Pulsa√ß√£o musical corrigida`);
        }
      }
      
      // 2. O que significa BPM? (Op√ß√£o 0: Batimentos Por Minuto)
      questao = quiz.questions.find(q => q.question.toLowerCase().includes('bpm'));
      if (questao) {
        questao.options.forEach((opt, i) => opt.isCorrect = (i === 0)); // Op√ß√£o 0 √© a correta
        questao.explanation = 'BPM = Batimentos Por Minuto! Indica a velocidade da m√∫sica. BPM 60 = 1 batida/segundo. ‚è±Ô∏è';
        totalCorrigido++;
        console.log(`   ‚úÖ BPM corrigida (op√ß√£o 0)`);
      }
      
      await quiz.save();
      console.log(`   üíæ Quiz salvo!\n`);
    }
    
    // ==================== QUIZ APRENDIZ - F√ìRMULAS DE COMPASSO ====================
    quiz = await Quiz.findOne({ title: /Quiz Aprendiz - F√ìRMULAS DE COMPASSO/i });
    if (quiz) {
      console.log('üìù Corrigindo: Quiz Aprendiz - F√ìRMULAS DE COMPASSO\n');
      
      // 1. Na f√≥rmula 4/4, primeiro n√∫mero? (Op√ß√£o 2: n√∫mero de tempos)
      let questao = quiz.questions.find(q => q.question.toLowerCase().includes('4/4') && q.question.toLowerCase().includes('primeiro'));
      if (questao) {
        questao.options.forEach((opt, i) => opt.isCorrect = (i === 2)); // Op√ß√£o 2 √© a correta
        questao.explanation = 'O n√∫mero de CIMA indica quantos TEMPOS tem no compasso! Em 4/4 s√£o 4 tempos. üéµüéµüéµüéµ';
        totalCorrigido++;
        console.log(`   ‚úÖ 4/4 primeiro n√∫mero corrigida (op√ß√£o 2)`);
      }
      
      // 2. Na f√≥rmula 3/4, segundo n√∫mero? (sem√≠nima)
      questao = quiz.questions.find(q => q.question.toLowerCase().includes('3/4') && q.question.toLowerCase().includes('segundo'));
      if (questao) {
        let indiceCorreto = questao.options.findIndex(opt => opt.label.toLowerCase().includes('sem√≠nima'));
        if (indiceCorreto !== -1) {
          questao.options.forEach((opt, i) => opt.isCorrect = (i === indiceCorreto));
          questao.explanation = 'O n√∫mero de BAIXO indica qual figura vale 1 tempo. O 4 = sem√≠nima! ‚ô©';
          totalCorrigido++;
          console.log(`   ‚úÖ 3/4 segundo n√∫mero corrigida`);
        }
      }
      
      // 3. Linha vertical que divide compassos? (barra de compasso)
      questao = quiz.questions.find(q => q.question.toLowerCase().includes('linha vertical'));
      if (questao) {
        let indiceCorreto = questao.options.findIndex(opt => opt.label.toLowerCase().includes('barra'));
        if (indiceCorreto !== -1) {
          questao.options.forEach((opt, i) => opt.isCorrect = (i === indiceCorreto));
          questao.explanation = 'A BARRA DE COMPASSO (|) divide os compassos na partitura! |üéµ|üéµ|';
          totalCorrigido++;
          console.log(`   ‚úÖ Barra de compasso corrigida`);
        }
      }
      
      await quiz.save();
      console.log(`   üíæ Quiz salvo!\n`);
    }
    
    // ==================== QUIZ APRENDIZ - COMPASSOS SIMPLES ====================
    quiz = await Quiz.findOne({ title: /Quiz Aprendiz - COMPASSOS SIMPLES/i });
    if (quiz) {
      console.log('üìù Corrigindo: Quiz Aprendiz - COMPASSOS SIMPLES\n');
      
      // 1. Qual representa compasso simples? (Op√ß√£o 2: 3/4)
      let questao = quiz.questions.find(q => q.question.toLowerCase().includes('representa um compasso simples'));
      if (questao) {
        questao.options.forEach((opt, i) => opt.isCorrect = (i === 2)); // Op√ß√£o 2 = 3/4
        questao.explanation = 'Compassos SIMPLES: 2/4, 3/4, 4/4. O tempo se divide em 2 partes. ‚ô©=‚ô™‚ô™';
        totalCorrigido++;
        console.log(`   ‚úÖ Compasso simples corrigida (op√ß√£o 2: 3/4)`);
      }
      
      // 2. Caracter√≠stica principal? (Op√ß√£o 1: divide em duas partes)
      questao = quiz.questions.find(q => q.question.toLowerCase().includes('caracter√≠stica principal'));
      if (questao) {
        questao.options.forEach((opt, i) => opt.isCorrect = (i === 1)); // Op√ß√£o 1
        questao.explanation = 'Compasso SIMPLES: cada tempo se divide em 2 partes iguais! ‚ô© ‚Üí ‚ô™‚ô™';
        totalCorrigido++;
        console.log(`   ‚úÖ Caracter√≠stica compasso simples corrigida (op√ß√£o 1)`);
      }
      
      // 3. Em 2/4, qual figura ocupa compasso inteiro? (m√≠nima)
      questao = quiz.questions.find(q => q.question.toLowerCase().includes('2/4'));
      if (questao) {
        let indiceCorreto = questao.options.findIndex(opt => opt.label.toLowerCase().includes('m√≠nima'));
        if (indiceCorreto !== -1) {
          questao.options.forEach((opt, i) => opt.isCorrect = (i === indiceCorreto));
          questao.explanation = 'Em 2/4 temos 2 tempos, e a M√çNIMA vale 2 tempos! ùÖóùÖ• = compasso inteiro';
          totalCorrigido++;
          console.log(`   ‚úÖ 2/4 figura inteira corrigida`);
        }
      }
      
      await quiz.save();
      console.log(`   üíæ Quiz salvo!\n`);
    }
    
    // ==================== QUIZ APRENDIZ - COMPASSOS COMPOSTOS ====================
    quiz = await Quiz.findOne({ title: /Quiz Aprendiz - COMPASSOS COMPOSTOS/i });
    if (quiz) {
      console.log('üìù Corrigindo: Quiz Aprendiz - COMPASSOS COMPOSTOS\n');
      
      // 1. Qual representa compasso composto? (6/8)
      let questao = quiz.questions.find(q => q.question.toLowerCase().includes('representa um compasso composto'));
      if (questao) {
        let indiceCorreto = questao.options.findIndex(opt => opt.label.includes('6/8'));
        if (indiceCorreto !== -1) {
          questao.options.forEach((opt, i) => opt.isCorrect = (i === indiceCorreto));
          questao.explanation = 'Compassos COMPOSTOS: 6/8, 9/8, 12/8. O tempo se divide em 3 partes. ‚ô©.=‚ô™‚ô™‚ô™';
          totalCorrigido++;
          console.log(`   ‚úÖ Compasso composto corrigida (6/8)`);
        }
      }
      
      // 2. Caracter√≠stica principal? (Op√ß√£o 1: divide em tr√™s partes)
      questao = quiz.questions.find(q => q.question.toLowerCase().includes('caracter√≠stica principal'));
      if (questao) {
        questao.options.forEach((opt, i) => opt.isCorrect = (i === 1)); // Op√ß√£o 1
        questao.explanation = 'Compasso COMPOSTO: cada tempo se divide em 3 partes iguais! ‚ô©. ‚Üí ‚ô™‚ô™‚ô™';
        totalCorrigido++;
        console.log(`   ‚úÖ Caracter√≠stica compasso composto corrigida (op√ß√£o 1)`);
      }
      
      await quiz.save();
      console.log(`   üíæ Quiz salvo!\n`);
    }
    
    // ==================== QUIZ APRENDIZ - TONS E SEMITONS ====================
    quiz = await Quiz.findOne({ title: /Quiz Aprendiz - TONS E SEMITONS/i });
    if (quiz) {
      console.log('üìù Corrigindo: Quiz Aprendiz - TONS E SEMITONS\n');
      
      // 1. O que √© um tom? (dist√¢ncia entre notas)
      let questao = quiz.questions.find(q => q.question.toLowerCase().includes('o que √© um tom'));
      if (questao) {
        let indiceCorreto = questao.options.findIndex(opt => 
          opt.label.toLowerCase().includes('dist√¢ncia')
        );
        if (indiceCorreto !== -1) {
          questao.options.forEach((opt, i) => opt.isCorrect = (i === indiceCorreto));
          questao.explanation = 'Um TOM √© a dist√¢ncia de 2 semitons (2 casas no piano)! De D√≥ para R√© √© 1 tom. üéπ';
          totalCorrigido++;
          console.log(`   ‚úÖ O que √© um tom corrigida`);
        }
      }
      
      // 2. Quantos semitons comp√µem um tom? (Op√ß√£o 1: Dois semitons)
      questao = quiz.questions.find(q => q.question.toLowerCase().includes('quantos semitons comp√µem um tom'));
      if (questao) {
        questao.options.forEach((opt, i) => opt.isCorrect = (i === 1)); // Op√ß√£o 1 = Dois semitons
        questao.explanation = '1 TOM = 2 SEMITONS! O semitom √© a menor dist√¢ncia entre duas notas. üéµ';
        totalCorrigido++;
        console.log(`   ‚úÖ Quantos semitons corrigida (op√ß√£o 1: Dois)`);
      }
      
      // 3. Entre quais notas existe semitom natural? (Mi-F√° e Si-D√≥)
      questao = quiz.questions.find(q => q.question.toLowerCase().includes('existe naturalmente um semitom'));
      if (questao) {
        let indiceCorreto = questao.options.findIndex(opt => 
          (opt.label.toLowerCase().includes('mi') && opt.label.toLowerCase().includes('f√°')) ||
          (opt.label.toLowerCase().includes('mi-f√°'))
        );
        if (indiceCorreto !== -1) {
          questao.options.forEach((opt, i) => opt.isCorrect = (i === indiceCorreto));
          questao.explanation = 'MI-F√Å e SI-D√ì t√™m SEMITOM natural (sem tecla preta no meio)! üéπ';
          totalCorrigido++;
          console.log(`   ‚úÖ Semitons naturais corrigida`);
        }
      }
      
      await quiz.save();
      console.log(`   üíæ Quiz salvo!\n`);
    }
    
    // ==================== CORRE√á√ÉO DAS FUN√á√ïES HARM√îNICAS ERRADAS ====================
    quiz = await Quiz.findOne({ title: /Quiz Aprendiz - FUN√á√ïES HARM√îNICAS/i });
    if (quiz) {
      console.log('üìù Corrigindo: Quiz Aprendiz - FUN√á√ïES HARM√îNICAS\n');
      
      // 1. T√¥nica = PRIMEIRO grau (N√ÉO quinto!)
      let questao = quiz.questions.find(q => q.question.toLowerCase().includes('t√¥nica'));
      if (questao) {
        let indiceCorreto = questao.options.findIndex(opt => opt.label.toLowerCase().includes('primeiro'));
        if (indiceCorreto !== -1) {
          questao.options.forEach((opt, i) => opt.isCorrect = (i === indiceCorreto));
          questao.explanation = 'T√îNICA = I GRAU (primeiro)! √â o acorde de repouso, o "lar" da m√∫sica. üè†';
          totalCorrigido++;
          console.log(`   ‚úÖ T√¥nica = PRIMEIRO grau (CORRIGIDO!)`);
        }
      }
      
      // 2. Dominante = QUINTO grau (N√ÉO primeiro!)
      questao = quiz.questions.find(q => q.question.toLowerCase().includes('dominante'));
      if (questao) {
        let indiceCorreto = questao.options.findIndex(opt => opt.label.toLowerCase().includes('quinto'));
        if (indiceCorreto !== -1) {
          questao.options.forEach((opt, i) => opt.isCorrect = (i === indiceCorreto));
          questao.explanation = 'DOMINANTE = V GRAU (quinto)! Cria tens√£o e quer voltar pra t√¥nica. ‚ö°';
          totalCorrigido++;
          console.log(`   ‚úÖ Dominante = QUINTO grau (CORRIGIDO!)`);
        }
      }
      
      // 3. Subdominante = QUARTO grau (N√ÉO segundo!)
      questao = quiz.questions.find(q => q.question.toLowerCase().includes('subdominante'));
      if (questao) {
        let indiceCorreto = questao.options.findIndex(opt => opt.label.toLowerCase().includes('quarto'));
        if (indiceCorreto !== -1) {
          questao.options.forEach((opt, i) => opt.isCorrect = (i === indiceCorreto));
          questao.explanation = 'SUBDOMINANTE = IV GRAU (quarto)! Prepara a dominante. üéµ';
          totalCorrigido++;
          console.log(`   ‚úÖ Subdominante = QUARTO grau (CORRIGIDO!)`);
        }
      }
      
      await quiz.save();
      console.log(`   üíæ Quiz salvo!\n`);
    }
    
    // ==================== CORRE√á√ÉO DAS CAD√äNCIAS ERRADAS ====================
    quiz = await Quiz.findOne({ title: /Quiz Aprendiz - CAD√äNCIAS/i });
    if (quiz) {
      console.log('üìù Corrigindo: Quiz Aprendiz - CAD√äNCIAS\n');
      
      // 1. Cad√™ncia perfeita = V‚ÜíI (N√ÉO I‚ÜíV!)
      let questao = quiz.questions.find(q => q.question.toLowerCase().includes('cad√™ncia perfeita'));
      if (questao) {
        let indiceCorreto = questao.options.findIndex(opt => 
          opt.label.toLowerCase().includes('v para i') || 
          opt.label.toLowerCase().includes('v para o i') ||
          (opt.label.toLowerCase().includes('progress√£o') && opt.label.toLowerCase().includes('v') && opt.label.toLowerCase().includes('i'))
        );
        if (indiceCorreto !== -1) {
          questao.options.forEach((opt, i) => opt.isCorrect = (i === indiceCorreto));
          questao.explanation = 'Cad√™ncia PERFEITA = V ‚Üí I (dominante para t√¥nica)! √â a finaliza√ß√£o mais forte. üéØ';
          totalCorrigido++;
          console.log(`   ‚úÖ Cad√™ncia perfeita = V‚ÜíI (CORRIGIDO!)`);
        }
      }
      
      // 2. Cad√™ncia plagal = IV‚ÜíI
      questao = quiz.questions.find(q => q.question.toLowerCase().includes('cad√™ncia plagal'));
      if (questao) {
        let indiceCorreto = questao.options.findIndex(opt => 
          opt.label.toLowerCase().includes('iv para i') || 
          opt.label.toLowerCase().includes('iv para o i')
        );
        if (indiceCorreto !== -1) {
          questao.options.forEach((opt, i) => opt.isCorrect = (i === indiceCorreto));
          questao.explanation = 'Cad√™ncia PLAGAL = IV ‚Üí I (subdominante para t√¥nica)! Cad√™ncia "Am√©m". üôè';
          totalCorrigido++;
          console.log(`   ‚úÖ Cad√™ncia plagal = IV‚ÜíI (CORRIGIDO!)`);
        }
      }
      
      await quiz.save();
      console.log(`   üíæ Quiz salvo!\n`);
    }
    
    // ==================== CORRE√á√ÉO D√ì MAIOR (SEM F√Å#!) ====================
    quiz = await Quiz.findOne({ title: /Quiz Aprendiz - ESCALAS MAIORES/i });
    if (quiz) {
      console.log('üìù Corrigindo: Quiz Aprendiz - ESCALAS MAIORES\n');
      
      let questao = quiz.questions.find(q => q.question.toLowerCase().includes('d√≥ maior'));
      if (questao) {
        let indiceCorreto = questao.options.findIndex(opt => 
          opt.label.includes('D√≥, R√©, Mi, F√°, Sol, L√°, Si') && !opt.label.includes('#')
        );
        if (indiceCorreto !== -1) {
          questao.options.forEach((opt, i) => opt.isCorrect = (i === indiceCorreto));
          questao.explanation = 'D√≥ maior: D√≥-R√©-Mi-F√°-Sol-L√°-Si! SEM acidentes (sem # ou ‚ô≠). üéπ';
          totalCorrigido++;
          console.log(`   ‚úÖ D√≥ maior SEM F√°# (CORRIGIDO!)`);
        }
      }
      
      await quiz.save();
      console.log(`   üíæ Quiz salvo!\n`);
    }
    
    // ==================== CORRE√á√ÉO ACORDE MENOR (TER√áA MENOR!) ====================
    quiz = await Quiz.findOne({ title: /Quiz Aprendiz - FORMA√á√ÉO DE ACORDES/i });
    if (quiz) {
      console.log('üìù Corrigindo: Quiz Aprendiz - FORMA√á√ÉO DE ACORDES\n');
      
      let questao = quiz.questions.find(q => q.question.toLowerCase().includes('acorde menor'));
      if (questao) {
        let indiceCorreto = questao.options.findIndex(opt => 
          opt.label.toLowerCase().includes('ter√ßa menor')
        );
        if (indiceCorreto !== -1) {
          questao.options.forEach((opt, i) => opt.isCorrect = (i === indiceCorreto));
          questao.explanation = 'Acorde MENOR = Fundamental + TER√áA MENOR + Quinta Justa! Som triste. üòîüéµ';
          totalCorrigido++;
          console.log(`   ‚úÖ Acorde menor = TER√áA MENOR (CORRIGIDO!)`);
        }
      }
      
      await quiz.save();
      console.log(`   üíæ Quiz salvo!\n`);
    }
    
    // Relat√≥rio final
    console.log('\n' + '='.repeat(80));
    console.log('üìä RELAT√ìRIO FINAL');
    console.log('='.repeat(80));
    console.log(`\n‚úÖ Total de quest√µes CORRIGIDAS: ${totalCorrigido}`);
    console.log('\nüéâ CORRE√á√ÉO MANUAL CONCLU√çDA COM SUCESSO!\n');
    console.log('='.repeat(80) + '\n');
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir:', error);
  }
};

const main = async () => {
  try {
    await connectDB();
    await corrigirManualmente();
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erro fatal:', error);
    process.exit(1);
  }
};

main();

