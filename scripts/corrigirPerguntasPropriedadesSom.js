const mongoose = require('mongoose');
require('dotenv').config();

const Quiz = require('../src/models/Quiz');

// Conectar ao banco
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB');
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    process.exit(1);
  }
};

// Corrigir perguntas espec√≠ficas do quiz de Propriedades do Som
const corrigirPerguntasPropriedadesSom = async () => {
  try {
    console.log('üîç Buscando quiz de Propriedades do Som...');
    
    // Buscar o quiz de Propriedades do Som
    const quiz = await Quiz.findOne({ 
      title: { $regex: /propriedades do som/i }
    });
    
    if (!quiz) {
      console.log('‚ùå Quiz de Propriedades do Som n√£o encontrado');
      return;
    }
    
    console.log(`‚úÖ Quiz encontrado: ${quiz.title}`);
    console.log(`üìä Total de perguntas: ${quiz.questions.length}`);
    
    let quizModificado = false;
    
    // Corre√ß√µes espec√≠ficas para cada pergunta
    const correcoes = [
      {
        perguntaContains: "propriedade do som determina se uma nota √© grave ou aguda",
        respostaCorreta: "Altura",
        explicacao: "A altura (pitch) √© a propriedade ac√∫stica relacionada √† frequ√™ncia das ondas sonoras. Quanto maior a frequ√™ncia, mais agudo √© o som; quanto menor, mais grave. √â medida em Hertz (Hz). Por exemplo, a nota L√° 440Hz √© o padr√£o de afina√ß√£o para orquestras."
      },
      {
        perguntaContains: "o que diferencia o som de um violino e um piano",
        respostaCorreta: "Timbre",
        explicacao: "O timbre √© a qualidade sonora que permite distinguir sons da mesma altura e intensidade produzidos por fontes diferentes. √â determinado pelos harm√¥nicos (frequ√™ncias secund√°rias) que acompanham a frequ√™ncia fundamental. Cada instrumento possui um envelope sonoro √∫nico com ataque, sustenta√ß√£o e decaimento caracter√≠sticos."
      },
      {
        perguntaContains: "o que significa o s√≠mbolo de crescendo",
        respostaCorreta: "Aumentar gradualmente a intensidade",
        explicacao: "O crescendo (<) √© uma indica√ß√£o de din√¢mica que orienta o m√∫sico a aumentar gradualmente a intensidade do som durante o trecho marcado. Seu oposto √© o diminuendo ou decrescendo (>), que indica redu√ß√£o gradual da intensidade. Estas indica√ß√µes s√£o essenciais para a expressividade musical, permitindo nuances na interpreta√ß√£o."
      }
    ];
    
    // Para cada pergunta do quiz
    for (let i = 0; i < quiz.questions.length; i++) {
      const question = quiz.questions[i];
      
      console.log(`\nüìù Analisando Quest√£o ${i+1}: "${question.question}"`);
      
      // Verificar se esta pergunta precisa de corre√ß√£o
      for (const correcao of correcoes) {
        if (question.question.toLowerCase().includes(correcao.perguntaContains.toLowerCase())) {
          console.log(`üîç Pergunta encontrada para corre√ß√£o: ${correcao.perguntaContains}`);
          
          // Verificar as op√ß√µes
          const options = question.options;
          const correctOptionIndex = options.findIndex(opt => opt.isCorrect);
          
          if (correctOptionIndex === -1) {
            console.log('‚ùå ERRO: Nenhuma op√ß√£o marcada como correta');
            continue;
          }
          
          const correctOption = options[correctOptionIndex];
          console.log(`‚úì Op√ß√£o atualmente marcada como correta: "${correctOption.label}"`);
          
          // Verificar se a resposta atual est√° correta
          if (correctOption.label.toLowerCase().includes(correcao.respostaCorreta.toLowerCase())) {
            console.log('‚úÖ A resposta j√° est√° correta');
            
            // Atualizar explica√ß√£o se necess√°rio
            if (!question.explanation || question.explanation.length < 30) {
              quiz.questions[i].explanation = correcao.explicacao;
              console.log('‚úÖ Explica√ß√£o atualizada');
              quizModificado = true;
            }
          } else {
            // Procurar a op√ß√£o correta
            const opcaoCorretaIndex = options.findIndex(opt => 
              opt.label.toLowerCase().includes(correcao.respostaCorreta.toLowerCase())
            );
            
            if (opcaoCorretaIndex !== -1) {
              console.log(`üîß Corrigindo: marcando "${options[opcaoCorretaIndex].label}" como correta`);
              
              // Marcar a op√ß√£o correta
              for (let j = 0; j < options.length; j++) {
                quiz.questions[i].options[j].isCorrect = (j === opcaoCorretaIndex);
              }
              
              // Atualizar explica√ß√£o
              quiz.questions[i].explanation = correcao.explicacao;
              
              quizModificado = true;
              console.log('‚úÖ Pergunta corrigida');
            } else {
              console.log(`‚ùå ERRO: N√£o foi poss√≠vel encontrar op√ß√£o com "${correcao.respostaCorreta}"`);
              
              // Mostrar todas as op√ß√µes dispon√≠veis
              console.log('üìã Op√ß√µes dispon√≠veis:');
              options.forEach((opt, idx) => {
                console.log(`   ${idx+1}. ${opt.label}`);
              });
            }
          }
          
          break;
        }
      }
    }
    
    // Salvar o quiz se foi modificado
    if (quizModificado) {
      await quiz.save();
      console.log(`\n‚úÖ Quiz ${quiz.title} atualizado com corre√ß√µes`);
    } else {
      console.log('\n‚ÑπÔ∏è Nenhuma modifica√ß√£o necess√°ria no quiz');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir perguntas:', error);
  }
};

// Corrigir perguntas espec√≠ficas do quiz de Nota√ß√£o Musical
const corrigirPerguntasNotacaoMusical = async () => {
  try {
    console.log('\nüîç Buscando quiz de Nota√ß√£o Musical...');
    
    // Buscar o quiz de Nota√ß√£o Musical
    const quiz = await Quiz.findOne({ 
      title: { $regex: /nota√ß√£o|notacao/i }
    });
    
    if (!quiz) {
      console.log('‚ùå Quiz de Nota√ß√£o Musical n√£o encontrado');
      return;
    }
    
    console.log(`‚úÖ Quiz encontrado: ${quiz.title}`);
    console.log(`üìä Total de perguntas: ${quiz.questions.length}`);
    
    let quizModificado = false;
    
    // Corre√ß√µes espec√≠ficas para cada pergunta
    const correcoes = [
      {
        perguntaContains: "quantas linhas possui um pentagrama",
        respostaCorreta: "5 linhas",
        explicacao: "O pentagrama (staff) padr√£o consiste em exatamente 5 linhas horizontais equidistantes e 4 espa√ßos entre elas. √â neste sistema que as notas musicais s√£o escritas, tanto nas linhas quanto nos espa√ßos. Quando necess√°rio, podem ser adicionadas linhas suplementares acima ou abaixo do pentagrama para acomodar notas mais agudas ou graves."
      },
      {
        perguntaContains: "quantos tempos vale uma m√≠nima",
        respostaCorreta: "2 tempos",
        explicacao: "A m√≠nima (half note) vale 2 tempos em um compasso simples. Representa metade da dura√ß√£o de uma semibreve (4 tempos) e o dobro de uma sem√≠nima (1 tempo). √â representada por uma nota com cabe√ßa branca e haste. Em compassos compostos, como 6/8, seu valor relativo se mant√©m, mas a unidade de tempo muda."
      },
      {
        perguntaContains: "o que indica a fra√ß√£o 4/4",
        respostaCorreta: "A f√≥rmula de compasso",
        explicacao: "A fra√ß√£o 4/4 indica a f√≥rmula de compasso (time signature). O numerador (4) representa o n√∫mero de unidades de tempo por compasso, e o denominador (4) indica que a sem√≠nima √© a unidade de tempo. Tamb√©m conhecido como compasso quatern√°rio simples ou 'common time', pode ser representado pelo s√≠mbolo C. √â o compasso mais utilizado na m√∫sica ocidental."
      }
    ];
    
    // Para cada pergunta do quiz
    for (let i = 0; i < quiz.questions.length; i++) {
      const question = quiz.questions[i];
      
      console.log(`\nüìù Analisando Quest√£o ${i+1}: "${question.question}"`);
      
      // Verificar se esta pergunta precisa de corre√ß√£o
      for (const correcao of correcoes) {
        if (question.question.toLowerCase().includes(correcao.perguntaContains.toLowerCase())) {
          console.log(`üîç Pergunta encontrada para corre√ß√£o: ${correcao.perguntaContains}`);
          
          // Verificar as op√ß√µes
          const options = question.options;
          const correctOptionIndex = options.findIndex(opt => opt.isCorrect);
          
          if (correctOptionIndex === -1) {
            console.log('‚ùå ERRO: Nenhuma op√ß√£o marcada como correta');
            continue;
          }
          
          const correctOption = options[correctOptionIndex];
          console.log(`‚úì Op√ß√£o atualmente marcada como correta: "${correctOption.label}"`);
          
          // Verificar se a resposta atual est√° correta
          if (correctOption.label.toLowerCase().includes(correcao.respostaCorreta.toLowerCase())) {
            console.log('‚úÖ A resposta j√° est√° correta');
            
            // Atualizar explica√ß√£o se necess√°rio
            if (!question.explanation || question.explanation.length < 30) {
              quiz.questions[i].explanation = correcao.explicacao;
              console.log('‚úÖ Explica√ß√£o atualizada');
              quizModificado = true;
            }
          } else {
            // Procurar a op√ß√£o correta
            const opcaoCorretaIndex = options.findIndex(opt => 
              opt.label.toLowerCase().includes(correcao.respostaCorreta.toLowerCase())
            );
            
            if (opcaoCorretaIndex !== -1) {
              console.log(`üîß Corrigindo: marcando "${options[opcaoCorretaIndex].label}" como correta`);
              
              // Marcar a op√ß√£o correta
              for (let j = 0; j < options.length; j++) {
                quiz.questions[i].options[j].isCorrect = (j === opcaoCorretaIndex);
              }
              
              // Atualizar explica√ß√£o
              quiz.questions[i].explanation = correcao.explicacao;
              
              quizModificado = true;
              console.log('‚úÖ Pergunta corrigida');
            } else {
              console.log(`‚ùå ERRO: N√£o foi poss√≠vel encontrar op√ß√£o com "${correcao.respostaCorreta}"`);
              
              // Mostrar todas as op√ß√µes dispon√≠veis
              console.log('üìã Op√ß√µes dispon√≠veis:');
              options.forEach((opt, idx) => {
                console.log(`   ${idx+1}. ${opt.label}`);
              });
            }
          }
          
          break;
        }
      }
    }
    
    // Salvar o quiz se foi modificado
    if (quizModificado) {
      await quiz.save();
      console.log(`\n‚úÖ Quiz ${quiz.title} atualizado com corre√ß√µes`);
    } else {
      console.log('\n‚ÑπÔ∏è Nenhuma modifica√ß√£o necess√°ria no quiz');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir perguntas:', error);
  }
};

// Executar o script
const main = async () => {
  try {
    await connectDB();
    await corrigirPerguntasPropriedadesSom();
    await corrigirPerguntasNotacaoMusical();
    console.log('\n‚ú® Processo conclu√≠do!');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erro fatal durante a execu√ß√£o:', error);
    process.exit(1);
  }
};

// Iniciar o script
main();





























