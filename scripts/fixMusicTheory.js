const mongoose = require('mongoose');
require('dotenv').config();

const Module = require('../src/models/Module');
const Quiz = require('../src/models/Quiz');

// Conectar ao banco
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB');
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    process.exit(1);
  }
};

// Conte√∫do te√≥rico correto
const correctedQuestions = {
  "Propriedades do Som": [
    {
      question: "Qual propriedade do som determina se uma nota √© grave ou aguda?",
      correctOptionLabel: "Altura",
      explanation: "A altura √© a propriedade que determina se um som √© grave (baixo) ou agudo (alto). √â como a diferen√ßa entre a voz de um homem (grave) e de uma mulher (aguda)."
    },
    {
      question: "O que diferencia o som de um violino e um piano tocando a mesma nota?",
      correctOptionLabel: "Timbre",
      explanation: "O timbre √© a 'cor' do som. Mesmo tocando a mesma nota, cada instrumento tem seu timbre caracter√≠stico - √© por isso que reconhecemos se √© piano ou violino."
    },
    {
      question: "Qual s√≠mbolo musical indica que uma nota deve ser tocada com pouca intensidade?",
      correctOptionLabel: "p (piano)",
      explanation: "O 'p' significa piano (suave em italiano). A sequ√™ncia √©: pp (pian√≠ssimo), p (piano), mp (mezzo piano), mf (mezzo forte), f (forte), ff (fort√≠ssimo)."
    },
    {
      question: "Qual propriedade do som est√° relacionada ao tempo que a nota dura?",
      correctOptionLabel: "Dura√ß√£o",
      explanation: "A dura√ß√£o determina quanto tempo uma nota deve ser sustentada. Uma semibreve dura 4 tempos, uma colcheia dura meio tempo."
    },
    {
      question: "O que significa o s√≠mbolo de crescendo (<) na partitura?",
      correctOptionLabel: "Aumentar gradualmente a intensidade",
      explanation: "O crescendo (<) indica aumento gradual da intensidade. √â como dizer 'vamos ficando mais forte aos poucos'."
    }
  ],
  "Nota√ß√£o Musical": [
    {
      question: "Quantas linhas possui um pentagrama padr√£o?",
      correctOptionLabel: "5 linhas",
      explanation: "O pentagrama padr√£o utilizado na nota√ß√£o musical ocidental possui exatamente 5 linhas horizontais paralelas e equidistantes, com 4 espa√ßos entre elas."
    },
    {
      question: "Em uma partitura com clave de Sol, onde se localiza a nota Sol?",
      correctOptionLabel: "Na segunda linha",
      explanation: "A clave de Sol indica que a nota Sol est√° localizada na segunda linha do pentagrama. √â por isso que o s√≠mbolo da clave de Sol circunda esta linha."
    },
    {
      question: "Quantos tempos vale uma m√≠nima?",
      correctOptionLabel: "2 tempos",
      explanation: "A m√≠nima vale 2 tempos em um compasso simples. √â metade do valor de uma semibreve (4 tempos) e o dobro de uma sem√≠nima (1 tempo)."
    },
    {
      question: "Qual figura musical representa a metade da dura√ß√£o de uma sem√≠nima?",
      correctOptionLabel: "Colcheia",
      explanation: "A colcheia representa metade da dura√ß√£o de uma sem√≠nima. Se a sem√≠nima vale 1 tempo, a colcheia vale 1/2 tempo."
    },
    {
      question: "O que indica a fra√ß√£o 4/4 no in√≠cio de uma partitura?",
      correctOptionLabel: "A f√≥rmula de compasso",
      explanation: "A fra√ß√£o 4/4 indica a f√≥rmula de compasso, onde o numerador (4) representa o n√∫mero de tempos por compasso e o denominador (4) indica que a sem√≠nima √© a unidade de tempo."
    }
  ],
  "Intervalos Musicais": [
    {
      question: "Qual √© o intervalo entre as notas D√≥ e Mi?",
      correctOptionLabel: "3¬™ maior",
      explanation: "O intervalo entre D√≥ e Mi √© uma 3¬™ maior, pois abrange tr√™s graus da escala (D√≥, R√©, Mi) e cont√©m 2 tons de dist√¢ncia."
    },
    {
      question: "Qual intervalo √© considerado 'conson√¢ncia perfeita'?",
      correctOptionLabel: "5¬™ justa",
      explanation: "Os intervalos de un√≠ssono, 4¬™ justa, 5¬™ justa e oitava s√£o considerados conson√¢ncias perfeitas, produzindo sons est√°veis e agrad√°veis quando tocados juntos."
    },
    {
      question: "Quantos tons tem um intervalo de 3¬™ menor?",
      correctOptionLabel: "1,5 tons",
      explanation: "Um intervalo de 3¬™ menor cont√©m 1,5 tons (ou 3 semitons). Por exemplo, entre L√° e D√≥ h√° 1,5 tons de dist√¢ncia."
    },
    {
      question: "Qual √© o intervalo entre as notas F√° e Si?",
      correctOptionLabel: "4¬™ aumentada",
      alternateLabel: "tr√≠tono",
      explanation: "O intervalo entre F√° e Si √© uma 4¬™ aumentada (tamb√©m conhecido como tr√≠tono). Cont√©m 3 tons de dist√¢ncia e √© tradicionalmente considerado dissonante."
    },
    {
      question: "Na escala maior, qual √© o intervalo formado entre o 1¬∫ e o 5¬∫ graus?",
      correctOptionLabel: "5¬™ justa",
      explanation: "Na escala maior, o intervalo entre o 1¬∫ e o 5¬∫ graus √© sempre uma 5¬™ justa. Por exemplo, em D√≥ maior: D√≥ (1¬∫) e Sol (5¬∫) formam uma 5¬™ justa."
    }
  ],
  "Harmonia Avan√ßada": [
    {
      question: "O que √© uma modula√ß√£o por acorde piv√¥?",
      correctOptionLabel: "Uma modula√ß√£o que utiliza um acorde comum a duas tonalidades",
      explanation: "A modula√ß√£o por acorde piv√¥ √© uma t√©cnica de transi√ß√£o harm√¥nica que utiliza um acorde comum a duas tonalidades para realizar uma mudan√ßa suave de um centro tonal para outro."
    },
    {
      question: "Qual destas √© uma caracter√≠stica do empr√©stimo modal?",
      correctOptionLabel: "Uso de acordes de modos paralelos na mesma tonalidade",
      explanation: "O empr√©stimo modal consiste em utilizar acordes derivados de modos paralelos (que compartilham a mesma t√¥nica) dentro de uma tonalidade. Por exemplo, usar o IV menor em uma tonalidade maior (emprestado do modo e√≥lio/menor)."
    }
  ]
};

// Corrigir todo o conte√∫do te√≥rico
const correctAllContent = async () => {
  try {
    console.log('üîß Iniciando corre√ß√£o completa de conte√∫do te√≥rico...');
    
    // Buscar todos os quizzes
    const quizzes = await Quiz.find({});
    console.log(`üìä Encontrados ${quizzes.length} quizzes no banco de dados`);
    
    // Estat√≠sticas
    let totalQuestionsChecked = 0;
    let questionsFixed = 0;
    let quizzesUpdated = 0;
    
    // Para cada quiz
    for (const quiz of quizzes) {
      console.log(`\nüîç Verificando: ${quiz.title}`);
      
      // Identificar o tipo de conte√∫do deste quiz
      let contentType = null;
      
      if (quiz.title.toLowerCase().includes('propriedades do som')) {
        contentType = "Propriedades do Som";
      } else if (quiz.title.toLowerCase().includes('nota√ß√£o') || 
                 quiz.title.toLowerCase().includes('figuras musicais') || 
                 quiz.title.toLowerCase().includes('solfejo')) {
        contentType = "Nota√ß√£o Musical";
      } else if (quiz.title.toLowerCase().includes('intervalos')) {
        contentType = "Intervalos Musicais";
      } else if (quiz.title.toLowerCase().includes('harmonia')) {
        contentType = "Harmonia Avan√ßada";
      }
      
      if (!contentType || !correctedQuestions[contentType]) {
        console.log(`‚ö†Ô∏è Tipo de conte√∫do n√£o identificado para ${quiz.title}`);
        continue;
      }
      
      console.log(`‚úÖ Identificado como: ${contentType}`);
      
      const correctContent = correctedQuestions[contentType];
      let quizModified = false;
      
      // Para cada quest√£o no quiz
      for (let i = 0; i < quiz.questions.length; i++) {
        totalQuestionsChecked++;
        const question = quiz.questions[i];
        
        // Encontrar a quest√£o correta correspondente
        const correctQuestion = correctContent.find(q => 
          q.question.toLowerCase() === question.question.toLowerCase() ||
          question.question.toLowerCase().includes(q.question.toLowerCase().substring(0, 15))
        );
        
        if (!correctQuestion) {
          console.log(`‚ö†Ô∏è N√£o encontrada quest√£o correspondente para: "${question.question.substring(0, 40)}..."`);
          continue;
        }
        
        // Encontrar a op√ß√£o que deveria estar correta
        let correctOptionIndex = question.options.findIndex(opt => 
          opt.label.toLowerCase().includes(correctQuestion.correctOptionLabel.toLowerCase())
        );
        
        // Se n√£o encontrou, tentar com label alternativo se dispon√≠vel
        if (correctOptionIndex === -1 && correctQuestion.alternateLabel) {
          correctOptionIndex = question.options.findIndex(opt => 
            opt.label.toLowerCase().includes(correctQuestion.alternateLabel.toLowerCase())
          );
          console.log(`   üîç Tentando com label alternativo: ${correctQuestion.alternateLabel}`);
        }
        
        if (correctOptionIndex === -1) {
          console.log(`‚ö†Ô∏è Op√ß√£o correta n√£o encontrada para: "${question.question.substring(0, 40)}..."`);
          console.log(`   Deveria ser: "${correctQuestion.correctOptionLabel}"`);
          
          // Listar op√ß√µes dispon√≠veis
          console.log('   Op√ß√µes dispon√≠veis:');
          question.options.forEach((opt, idx) => {
            console.log(`     ${idx + 1}. ${opt.label} (${opt.isCorrect ? '‚úì' : '‚úó'})`);
          });
          
          continue;
        }
        
        // Verificar se j√° est√° correta
        if (question.options[correctOptionIndex].isCorrect) {
          console.log(`‚úÖ Quest√£o j√° correta: "${question.question.substring(0, 40)}..."`);
          continue;
        }
        
        // Corrigir a quest√£o
        console.log(`üîß Corrigindo quest√£o: "${question.question.substring(0, 40)}..."`);
        console.log(`   Op√ß√£o correta: "${question.options[correctOptionIndex].label}"`);
        
        // Marcar todas as op√ß√µes como incorretas
        for (let j = 0; j < question.options.length; j++) {
          quiz.questions[i].options[j].isCorrect = false;
        }
        
        // Marcar a op√ß√£o correta
        quiz.questions[i].options[correctOptionIndex].isCorrect = true;
        
        // Atualizar explica√ß√£o se estiver vazia
        if (!question.explanation || question.explanation.trim() === '') {
          quiz.questions[i].explanation = correctQuestion.explanation;
          console.log(`   ‚úèÔ∏è Adicionada explica√ß√£o: "${correctQuestion.explanation.substring(0, 40)}..."`);
        }
        
        questionsFixed++;
        quizModified = true;
      }
      
      // Salvar altera√ß√µes se o quiz foi modificado
      if (quizModified) {
        await quiz.save();
        console.log(`‚úÖ Quiz salvo com corre√ß√µes: ${quiz.title}`);
        quizzesUpdated++;
      }
    }
    
    console.log('\nüìä Resumo das corre√ß√µes:');
    console.log(`   Total de quizzes verificados: ${quizzes.length}`);
    console.log(`   Total de quest√µes verificadas: ${totalQuestionsChecked}`);
    console.log(`   Quest√µes corrigidas: ${questionsFixed}`);
    console.log(`   Quizzes atualizados: ${quizzesUpdated}`);
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir conte√∫do te√≥rico:', error);
  }
};

// Fun√ß√£o para corrigir manualmente a quest√£o do crescendo
const fixCrescendoQuestion = async () => {
  try {
    console.log('\nüîç Localizando e corrigindo a quest√£o espec√≠fica sobre crescendo...');
    
    // Buscar o quiz sobre propriedades do som
    const quiz = await Quiz.findOne({ title: { $regex: /Propriedades do Som/i } });
    
    if (!quiz) {
      console.log('‚ùå Quiz n√£o encontrado');
      return;
    }
    
    // Procurar a quest√£o espec√≠fica sobre crescendo
    const crescendoIndex = quiz.questions.findIndex(q => 
      q.question.toLowerCase().includes('crescendo') || 
      (q.question.toLowerCase().includes('piano') && q.question.toLowerCase().includes('forte')));
    
    if (crescendoIndex === -1) {
      console.log('‚ùå Quest√£o sobre crescendo n√£o encontrada');
      return;
    }
    
    const question = quiz.questions[crescendoIndex];
    console.log(`‚úÖ Quest√£o encontrada: "${question.question}"`);
    
    // Localizar a op√ß√£o "Aumentar gradualmente a intensidade"
    const correctOptionIndex = question.options.findIndex(opt => 
      opt.label.toLowerCase().includes('aumentar') && 
      opt.label.toLowerCase().includes('intensidade'));
    
    if (correctOptionIndex === -1) {
      console.log('‚ùå Op√ß√£o correta n√£o encontrada');
      return;
    }
    
    // Verificar se j√° est√° correta
    if (question.options[correctOptionIndex].isCorrect) {
      console.log('‚úÖ Quest√£o j√° est√° correta');
      return;
    }
    
    // Corrigir a quest√£o - primeiro marcar todas como incorretas
    for (let i = 0; i < question.options.length; i++) {
      quiz.questions[crescendoIndex].options[i].isCorrect = false;
    }
    
    // Marcar a op√ß√£o correta
    quiz.questions[crescendoIndex].options[correctOptionIndex].isCorrect = true;
    
    // Verificar se a op√ß√£o inclui o s√≠mbolo correto
    if (!quiz.questions[crescendoIndex].options[correctOptionIndex].label.includes('<')) {
      quiz.questions[crescendoIndex].options[correctOptionIndex].label = 
        'Aumentar gradualmente a intensidade (<)';
    }
    
    await quiz.save();
    console.log('‚úÖ Quest√£o corrigida e salva com sucesso');
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir quest√£o sobre crescendo:', error);
  }
};

// Executar o script
const main = async () => {
  try {
    await connectDB();
    
    // Primeiro corrigir especificamente a quest√£o problem√°tica do crescendo
    await fixCrescendoQuestion();
    
    // Depois corrigir todo o restante do conte√∫do te√≥rico
    await correctAllContent();
    
    console.log('\n‚ú® Corre√ß√µes conclu√≠das!');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erro fatal durante a execu√ß√£o:', error);
    process.exit(1);
  }
};

// Iniciar o script
main();
