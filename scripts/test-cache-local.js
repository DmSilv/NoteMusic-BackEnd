const axios = require('axios');

const API_URL = 'http://localhost:3333';

async function testCache() {
  console.log('üß™ Testando Sistema de Cache...\n');

  // Primeira chamada (sem cache)
  console.log('1Ô∏è‚É£ Primeira chamada (SEM cache)...');
  const start1 = Date.now();
  const res1 = await axios.get(`${API_URL}/api/modules`);
  const time1 = Date.now() - start1;
  console.log(`   ‚è±Ô∏è  Tempo: ${time1}ms`);
  console.log(`   üìä M√≥dulos: ${res1.data.count || res1.data.modules.length}\n`);

  // Segunda chamada (COM cache)
  console.log('2Ô∏è‚É£ Segunda chamada (COM cache)...');
  const start2 = Date.now();
  const res2 = await axios.get(`${API_URL}/api/modules`);
  const time2 = Date.now() - start2;
  console.log(`   ‚è±Ô∏è  Tempo: ${time2}ms`);
  console.log(`   üìä M√≥dulos: ${res2.data.count || res2.data.modules.length}\n`);

  // Terceira chamada (confirmar cache)
  console.log('3Ô∏è‚É£ Terceira chamada (confirmar cache)...');
  const start3 = Date.now();
  const res3 = await axios.get(`${API_URL}/api/modules`);
  const time3 = Date.now() - start3;
  console.log(`   ‚è±Ô∏è  Tempo: ${time3}ms\n`);

  // An√°lise
  const improvement = ((time1 - time2) / time1 * 100).toFixed(1);
  const avgWithCache = ((time2 + time3) / 2).toFixed(0);

  console.log('='.repeat(50));
  console.log('üìä AN√ÅLISE DE PERFORMANCE');
  console.log('='.repeat(50));
  console.log(`Primeira (sem cache): ${time1}ms`);
  console.log(`Segunda (com cache):  ${time2}ms`);
  console.log(`Terceira (com cache): ${time3}ms`);
  console.log(`\nüìà Melhoria: ${improvement}% mais r√°pido com cache!`);
  console.log(`üìà Tempo m√©dio com cache: ${avgWithCache}ms`);
  
  if (time2 < time1 * 0.3) {
    console.log('\n‚úÖ Cache funcionando PERFEITAMENTE! (>70% mais r√°pido)');
  } else if (time2 < time1 * 0.5) {
    console.log('\n‚úÖ Cache funcionando bem! (>50% mais r√°pido)');
  } else {
    console.log('\n‚ö†Ô∏è Cache pode n√£o estar funcionando. Verifique os logs do servidor.');
  }
}

testCache().catch(error => {
  console.error('‚ùå Erro:', error.message);
  if (error.code === 'ECONNREFUSED') {
    console.error('‚ö†Ô∏è Servidor n√£o est√° rodando! Execute: npm start');
  }
  process.exit(1);
});

