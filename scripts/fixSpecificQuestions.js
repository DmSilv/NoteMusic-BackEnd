const mongoose = require('mongoose');
require('dotenv').config();

const Quiz = require('../src/models/Quiz');

// Conectar ao banco
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB');
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    process.exit(1);
  }
};

// Corrigir as quest√µes espec√≠ficas que o script autom√°tico n√£o conseguiu resolver
const fixSpecificQuestions = async () => {
  try {
    console.log('üîß Iniciando corre√ß√£o manual de quest√µes espec√≠ficas...');
    
    // PARTE 1: Corrigir as quest√µes sobre intervalos musicais (F√°-Si e 1¬∫-5¬∫ graus)
    const intervalosQuiz = await Quiz.findOne({ title: { $regex: /Intervalos Musicais/i } });
    
    if (intervalosQuiz) {
      console.log('‚úÖ Quiz de intervalos musicais encontrado');
      
      // Quest√£o 1: Intervalo entre F√° e Si
      const faSiQuestion = intervalosQuiz.questions.find(q => 
        q.question.includes('F√° e Si'));
      
      if (faSiQuestion) {
        // Encontrar o √≠ndice da quest√£o
        const questionIndex = intervalosQuiz.questions.findIndex(q => q === faSiQuestion);
        console.log(`‚úÖ Quest√£o "F√° e Si" encontrada (√≠ndice: ${questionIndex})`);
        
        // Verificar op√ß√µes
        const options = faSiQuestion.options;
        options.forEach((opt, i) => {
          console.log(`   Op√ß√£o ${i+1}: ${opt.label} (${opt.isCorrect ? '‚úì' : '‚úó'})`);
        });
        
        // Encontrar a op√ß√£o "4¬™ aumentada"
        const correctOptionIndex = options.findIndex(opt => 
          opt.label.toLowerCase().includes('4¬™ aumentada') || 
          opt.label.toLowerCase().includes('4¬™ aum') ||
          opt.label.toLowerCase().includes('tr√≠tono'));
        
        if (correctOptionIndex !== -1) {
          console.log(`‚úÖ Op√ß√£o correta encontrada: "${options[correctOptionIndex].label}"`);
          
          // Marcar todas como incorretas primeiro
          for (let i = 0; i < options.length; i++) {
            intervalosQuiz.questions[questionIndex].options[i].isCorrect = false;
          }
          
          // Marcar a correta
          intervalosQuiz.questions[questionIndex].options[correctOptionIndex].isCorrect = true;
          
          console.log('‚úÖ Quest√£o "F√° e Si" corrigida');
        }
      }
      
      // Quest√£o 2: Intervalo entre 1¬∫ e 5¬∫ graus
      const grausQuestion = intervalosQuiz.questions.find(q => 
        q.question.includes('1¬∫ e o 5¬∫ graus'));
      
      if (grausQuestion) {
        // Encontrar o √≠ndice da quest√£o
        const questionIndex = intervalosQuiz.questions.findIndex(q => q === grausQuestion);
        console.log(`‚úÖ Quest√£o "1¬∫ e 5¬∫ graus" encontrada (√≠ndice: ${questionIndex})`);
        
        // Verificar op√ß√µes
        const options = grausQuestion.options;
        options.forEach((opt, i) => {
          console.log(`   Op√ß√£o ${i+1}: ${opt.label} (${opt.isCorrect ? '‚úì' : '‚úó'})`);
        });
        
        // Encontrar a op√ß√£o "5¬™ justa"
        const correctOptionIndex = options.findIndex(opt => 
          opt.label.toLowerCase().includes('5¬™ justa') || 
          opt.label.toLowerCase().includes('5¬™ j'));
        
        if (correctOptionIndex !== -1) {
          console.log(`‚úÖ Op√ß√£o correta encontrada: "${options[correctOptionIndex].label}"`);
          
          // Marcar todas como incorretas primeiro
          for (let i = 0; i < options.length; i++) {
            intervalosQuiz.questions[questionIndex].options[i].isCorrect = false;
          }
          
          // Marcar a correta
          intervalosQuiz.questions[questionIndex].options[correctOptionIndex].isCorrect = true;
          
          console.log('‚úÖ Quest√£o "1¬∫ e 5¬∫ graus" corrigida');
        }
      }
      
      // Salvar o quiz de intervalos
      await intervalosQuiz.save();
      console.log('‚úÖ Quiz de intervalos musicais salvo com sucesso');
    }
    
    // PARTE 2: Corrigir figura musical (propriedades do som)
    const propSomQuiz = await Quiz.findOne({ title: { $regex: /Propriedades do Som/i } });
    
    if (propSomQuiz) {
      console.log('\n‚úÖ Quiz de propriedades do som encontrado');
      
      // Quest√£o: Figura musical de maior dura√ß√£o
      const figuraQuestion = propSomQuiz.questions.find(q => 
        q.question.includes('figura musical') && q.question.includes('maior dura√ß√£o'));
      
      if (figuraQuestion) {
        // Encontrar o √≠ndice da quest√£o
        const questionIndex = propSomQuiz.questions.findIndex(q => q === figuraQuestion);
        console.log(`‚úÖ Quest√£o sobre figura musical encontrada (√≠ndice: ${questionIndex})`);
        
        // Verificar op√ß√µes
        const options = figuraQuestion.options;
        options.forEach((opt, i) => {
          console.log(`   Op√ß√£o ${i+1}: ${opt.label} (${opt.isCorrect ? '‚úì' : '‚úó'})`);
        });
        
        // Encontrar a op√ß√£o "Semibreve"
        const correctOptionIndex = options.findIndex(opt => 
          opt.label.toLowerCase().includes('semibreve'));
        
        if (correctOptionIndex !== -1) {
          console.log(`‚úÖ Op√ß√£o correta encontrada: "${options[correctOptionIndex].label}"`);
          
          // Marcar todas como incorretas primeiro
          for (let i = 0; i < options.length; i++) {
            propSomQuiz.questions[questionIndex].options[i].isCorrect = false;
          }
          
          // Marcar a correta
          propSomQuiz.questions[questionIndex].options[correctOptionIndex].isCorrect = true;
          
          // Adicionar explica√ß√£o se n√£o existir
          if (!propSomQuiz.questions[questionIndex].explanation || 
              propSomQuiz.questions[questionIndex].explanation.trim() === '') {
            propSomQuiz.questions[questionIndex].explanation = 
              "A semibreve √© a figura musical de maior dura√ß√£o no sistema tradicional, valendo 4 tempos em um compasso quatern√°rio.";
            console.log('   ‚úèÔ∏è Adicionada explica√ß√£o');
          }
          
          console.log('‚úÖ Quest√£o sobre figura musical corrigida');
        }
      }
      
      // Salvar o quiz de propriedades do som
      await propSomQuiz.save();
      console.log('‚úÖ Quiz de propriedades do som salvo com sucesso');
    }
    
    console.log('\n‚úÖ Corre√ß√µes espec√≠ficas conclu√≠das');
    
  } catch (error) {
    console.error('‚ùå Erro ao corrigir quest√µes espec√≠ficas:', error);
  }
};

// Fun√ß√£o para verificar a corre√ß√£o das respostas
const verifyCorrectAnswers = async () => {
  try {
    console.log('\nüîç Verificando se todas as quest√µes t√™m uma op√ß√£o correta marcada...');
    
    // Buscar todos os quizzes
    const quizzes = await Quiz.find({});
    console.log(`üìä Encontrados ${quizzes.length} quizzes`);
    
    let totalQuestionsWithoutCorrect = 0;
    
    // Verificar cada quiz
    for (const quiz of quizzes) {
      console.log(`\nüìù Quiz: ${quiz.title}`);
      
      // Verificar cada quest√£o
      for (let i = 0; i < quiz.questions.length; i++) {
        const question = quiz.questions[i];
        
        // Contar op√ß√µes corretas
        const correctCount = question.options.filter(opt => opt.isCorrect).length;
        
        // Log baseado no resultado
        if (correctCount === 0) {
          console.log(`‚ùå Quest√£o ${i+1} sem resposta correta: "${question.question.substring(0, 40)}..."`);
          totalQuestionsWithoutCorrect++;
        } else if (correctCount > 1) {
          console.log(`‚ö†Ô∏è Quest√£o ${i+1} com ${correctCount} respostas corretas: "${question.question.substring(0, 40)}..."`);
        } else {
          console.log(`‚úÖ Quest√£o ${i+1}: "${question.question.substring(0, 40)}..." - OK`);
        }
      }
    }
    
    console.log('\nüìä Resumo da verifica√ß√£o:');
    console.log(`   Total de quest√µes sem resposta correta: ${totalQuestionsWithoutCorrect}`);
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar respostas corretas:', error);
  }
};

// Executar o script
const main = async () => {
  try {
    await connectDB();
    
    // Corrigir quest√µes espec√≠ficas
    await fixSpecificQuestions();
    
    // Verificar se todas as quest√µes t√™m uma resposta correta
    await verifyCorrectAnswers();
    
    console.log('\n‚ú® Processo conclu√≠do!');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erro fatal durante a execu√ß√£o:', error);
    process.exit(1);
  }
};

// Iniciar o script
main();





























