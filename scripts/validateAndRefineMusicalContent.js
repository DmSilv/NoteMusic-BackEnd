const mongoose = require('mongoose');
require('dotenv').config();

const Module = require('../src/models/Module');
const Quiz = require('../src/models/Quiz');

// Conectar ao banco
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB');
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    process.exit(1);
  }
};

// Conte√∫do te√≥rico refinado baseado em teoria musical acad√™mica
const refinedMusicalContent = {
  "Propriedades do Som": [
    {
      question: "Qual propriedade do som determina se uma nota √© grave ou aguda?",
      correctOptionLabel: "Altura",
      explanation: "A altura (pitch) √© a propriedade ac√∫stica relacionada √† frequ√™ncia das ondas sonoras. Quanto maior a frequ√™ncia, mais agudo √© o som; quanto menor, mais grave. √â medida em Hertz (Hz)."
    },
    {
      question: "O que diferencia o som de um violino e um piano tocando a mesma nota?",
      correctOptionLabel: "Timbre",
      explanation: "O timbre √© a qualidade sonora que permite distinguir sons da mesma altura e intensidade produzidos por fontes diferentes. √â determinado pelos harm√¥nicos (frequ√™ncias secund√°rias) que acompanham a frequ√™ncia fundamental."
    },
    {
      question: "Qual s√≠mbolo musical indica que uma nota deve ser tocada com pouca intensidade?",
      correctOptionLabel: "p (piano)",
      explanation: "Na nota√ß√£o musical, 'p' (piano) indica que o som deve ser executado com baixa intensidade. A escala completa de din√¢micas vai de ppp (pianississimo - extremamente suave) a fff (fortississimo - extremamente forte)."
    },
    {
      question: "Qual figura musical representa a maior dura√ß√£o em um compasso simples?",
      correctOptionLabel: "Semibreve",
      explanation: "A semibreve (whole note) √© a figura de maior dura√ß√£o no sistema moderno de nota√ß√£o musical, valendo 4 tempos em um compasso quatern√°rio (4/4). As demais figuras s√£o subdivis√µes dela: m√≠nima (2 tempos), sem√≠nima (1 tempo), colcheia (1/2 tempo), etc."
    },
    {
      question: "O que significa o s√≠mbolo de crescendo (<) na partitura?",
      correctOptionLabel: "Aumentar gradualmente a intensidade",
      explanation: "O crescendo (<) √© uma indica√ß√£o de din√¢mica que orienta o m√∫sico a aumentar gradualmente a intensidade do som durante o trecho marcado. Seu oposto √© o diminuendo ou decrescendo (>), que indica redu√ß√£o gradual da intensidade."
    }
  ],
  "Nota√ß√£o Musical": [
    {
      question: "Quantas linhas possui um pentagrama padr√£o?",
      correctOptionLabel: "5 linhas",
      explanation: "O pentagrama (staff) padr√£o consiste em exatamente 5 linhas horizontais equidistantes e 4 espa√ßos entre elas. √â neste sistema que as notas musicais s√£o escritas, tanto nas linhas quanto nos espa√ßos."
    },
    {
      question: "Em uma partitura com clave de Sol, onde se localiza a nota Sol?",
      correctOptionLabel: "Na segunda linha",
      explanation: "A clave de Sol (G clef) √© posicionada de modo que sua espiral circunde a segunda linha do pentagrama, indicando que ali est√° a nota Sol (G). Esta √© a clave mais comum para instrumentos de registro m√©dio-agudo."
    },
    {
      question: "Quantos tempos vale uma m√≠nima?",
      correctOptionLabel: "2 tempos",
      explanation: "A m√≠nima (half note) vale 2 tempos em um compasso simples. Representa metade da dura√ß√£o de uma semibreve (4 tempos) e o dobro de uma sem√≠nima (1 tempo). √â representada por uma nota com cabe√ßa branca e haste."
    },
    {
      question: "Qual figura musical representa a metade da dura√ß√£o de uma sem√≠nima?",
      correctOptionLabel: "Colcheia",
      explanation: "A colcheia (eighth note) representa 1/2 tempo, metade da dura√ß√£o de uma sem√≠nima. √â identificada pela cabe√ßa preta com haste e uma bandeirola. Duas colcheias ligadas equivalem a uma sem√≠nima."
    },
    {
      question: "O que indica a fra√ß√£o 4/4 no in√≠cio de uma partitura?",
      correctOptionLabel: "A f√≥rmula de compasso",
      explanation: "A fra√ß√£o 4/4 indica a f√≥rmula de compasso (time signature). O numerador (4) representa o n√∫mero de unidades de tempo por compasso, e o denominador (4) indica que a sem√≠nima √© a unidade de tempo. Tamb√©m conhecido como compasso quatern√°rio simples."
    }
  ],
  "Intervalos Musicais": [
    {
      question: "Qual √© o intervalo entre as notas D√≥ e Mi?",
      correctOptionLabel: "3¬™ maior",
      explanation: "O intervalo entre D√≥ e Mi √© uma 3¬™ maior, abrangendo 2 tons (ou 4 semitons). Na teoria musical ocidental, a 3¬™ maior √© um dos intervalos fundamentais para a constru√ß√£o de acordes maiores."
    },
    {
      question: "Qual intervalo √© considerado 'conson√¢ncia perfeita'?",
      correctOptionLabel: "5¬™ justa",
      explanation: "Na teoria tradicional, os intervalos de un√≠ssono, 4¬™ justa, 5¬™ justa e oitava s√£o considerados conson√¢ncias perfeitas. A 5¬™ justa (7 semitons) √© especialmente importante na m√∫sica ocidental, sendo a base do ciclo de quintas e da rela√ß√£o entre t√¥nica e dominante."
    },
    {
      question: "Quantos tons tem um intervalo de 3¬™ menor?",
      correctOptionLabel: "1,5 tons",
      explanation: "Um intervalo de 3¬™ menor cont√©m 1,5 tons (ou 3 semitons). Exemplos incluem L√°-D√≥, Mi-Sol e Si-R√©. A 3¬™ menor √© fundamental para a constru√ß√£o de acordes menores e para definir o modo menor."
    },
    {
      question: "Qual √© o intervalo entre as notas F√° e Si?",
      correctOptionLabel: "4¬™ aumentada",
      alternateLabel: "tr√≠tono",
      explanation: "O intervalo entre F√° e Si √© uma 4¬™ aumentada (3 tons ou 6 semitons), tamb√©m conhecido como tr√≠tono. Na m√∫sica medieval era chamado de 'diabolus in musica' (o diabo na m√∫sica) por sua disson√¢ncia. √â um intervalo sim√©trico que divide a oitava exatamente ao meio."
    },
    {
      question: "Na escala maior, qual √© o intervalo formado entre o 1¬∫ e o 5¬∫ graus?",
      correctOptionLabel: "5¬™ justa",
      explanation: "Na escala maior, o intervalo entre o 1¬∫ e o 5¬∫ graus √© sempre uma 5¬™ justa (7 semitons). Esta rela√ß√£o √© fundamental na harmonia tonal, estabelecendo a rela√ß√£o t√¥nica-dominante que define grande parte da m√∫sica ocidental."
    }
  ],
  "Harmonia Avan√ßada": [
    {
      question: "O que √© uma modula√ß√£o por acorde piv√¥?",
      correctOptionLabel: "Uma modula√ß√£o que utiliza um acorde comum a duas tonalidades",
      explanation: "A modula√ß√£o por acorde piv√¥ √© uma t√©cnica de transi√ß√£o harm√¥nica onde um acorde que pertence simultaneamente a duas tonalidades diferentes √© usado como ponte para estabelecer a nova tonalidade. √â uma forma suave de modula√ß√£o muito utilizada na m√∫sica cl√°ssica."
    },
    {
      question: "Qual destas √© uma caracter√≠stica do empr√©stimo modal?",
      correctOptionLabel: "Uso de acordes de modos paralelos na mesma tonalidade",
      explanation: "O empr√©stimo modal consiste em utilizar acordes derivados de modos paralelos (que compartilham a mesma t√¥nica) dentro de uma tonalidade. Por exemplo, em D√≥ maior, usar o acorde de L√°b maior (VI grau do modo menor) cria uma sonoridade expressiva por empr√©stimo modal."
    },
    {
      question: "Qual acorde √© a substitui√ß√£o trit√¥nica do V7?",
      correctOptionLabel: "bII7",
      explanation: "A substitui√ß√£o trit√¥nica do V7 √© o acorde de s√©tima constru√≠do sobre o segundo grau abaixado (bII7). Por exemplo, em D√≥ maior, o V7 (G7) pode ser substitu√≠do pelo Db7. Estes acordes compartilham as notas guia (3¬™ e 7¬™) e est√£o separados por um tr√≠tono."
    },
    {
      question: "Qual progress√£o representa uma cad√™ncia aut√™ntica perfeita?",
      correctOptionLabel: "V7-I com ambos os acordes em estado fundamental",
      explanation: "A cad√™ncia aut√™ntica perfeita consiste na progress√£o V7-I (dominante para t√¥nica) com ambos os acordes em estado fundamental e com a t√¥nica na voz mais aguda do acorde final. √â considerada a cad√™ncia mais conclusiva na m√∫sica tonal."
    },
    {
      question: "Qual t√©cnica de harmoniza√ß√£o utiliza acordes com notas adicionadas al√©m da tr√≠ade b√°sica?",
      correctOptionLabel: "Extens√µes harm√¥nicas",
      explanation: "As extens√µes harm√¥nicas s√£o notas adicionadas al√©m da tr√≠ade b√°sica (como 7¬™, 9¬™, 11¬™ e 13¬™). S√£o muito utilizadas no jazz e na m√∫sica popular para criar sonoridades mais ricas e complexas, ampliando as possibilidades expressivas dos acordes."
    }
  ]
};

// Verificar e refinar o conte√∫do te√≥rico
const validateAndRefineContent = async () => {
  try {
    console.log('üîç Iniciando valida√ß√£o e refinamento de conte√∫do te√≥rico musical...');
    
    // Buscar todos os quizzes
    const quizzes = await Quiz.find({});
    console.log(`üìä Encontrados ${quizzes.length} quizzes no banco de dados`);
    
    // Estat√≠sticas
    let totalQuestionsChecked = 0;
    let questionsRefined = 0;
    let quizzesUpdated = 0;
    
    // Para cada quiz
    for (const quiz of quizzes) {
      console.log(`\nüéµ Analisando quiz: ${quiz.title}`);
      
      // Identificar o tipo de conte√∫do deste quiz
      let contentType = null;
      
      if (quiz.title.toLowerCase().includes('propriedades do som')) {
        contentType = "Propriedades do Som";
      } else if (quiz.title.toLowerCase().includes('nota√ß√£o') || 
                 quiz.title.toLowerCase().includes('figuras musicais') || 
                 quiz.title.toLowerCase().includes('solfejo')) {
        contentType = "Nota√ß√£o Musical";
      } else if (quiz.title.toLowerCase().includes('intervalos')) {
        contentType = "Intervalos Musicais";
      } else if (quiz.title.toLowerCase().includes('harmonia')) {
        contentType = "Harmonia Avan√ßada";
      }
      
      if (!contentType || !refinedMusicalContent[contentType]) {
        console.log(`‚ö†Ô∏è Tipo de conte√∫do n√£o identificado para ${quiz.title}`);
        continue;
      }
      
      console.log(`‚úÖ Identificado como: ${contentType}`);
      
      const refinedContent = refinedMusicalContent[contentType];
      let quizModified = false;
      
      // Para cada quest√£o no quiz
      for (let i = 0; i < quiz.questions.length; i++) {
        totalQuestionsChecked++;
        const question = quiz.questions[i];
        
        // Encontrar a quest√£o refinada correspondente
        const refinedQuestion = refinedContent.find(q => 
          q.question.toLowerCase() === question.question.toLowerCase() ||
          question.question.toLowerCase().includes(q.question.toLowerCase().substring(0, 15)) ||
          q.question.toLowerCase().includes(question.question.toLowerCase().substring(0, 15))
        );
        
        if (!refinedQuestion) {
          console.log(`‚ö†Ô∏è N√£o encontrada quest√£o correspondente para: "${question.question.substring(0, 40)}..."`);
          continue;
        }
        
        // Verificar se a explica√ß√£o precisa ser refinada
        if (refinedQuestion.explanation && 
            (!question.explanation || 
             question.explanation.length < refinedQuestion.explanation.length * 0.8)) {
          console.log(`üìù Refinando explica√ß√£o para: "${question.question.substring(0, 40)}..."`);
          quiz.questions[i].explanation = refinedQuestion.explanation;
          quizModified = true;
          questionsRefined++;
        }
        
        // Encontrar a op√ß√£o que deveria estar correta
        let correctOptionIndex = question.options.findIndex(opt => 
          opt.label.toLowerCase().includes(refinedQuestion.correctOptionLabel.toLowerCase())
        );
        
        // Se n√£o encontrou, tentar com label alternativo se dispon√≠vel
        if (correctOptionIndex === -1 && refinedQuestion.alternateLabel) {
          correctOptionIndex = question.options.findIndex(opt => 
            opt.label.toLowerCase().includes(refinedQuestion.alternateLabel.toLowerCase())
          );
        }
        
        if (correctOptionIndex === -1) {
          console.log(`‚ö†Ô∏è Op√ß√£o correta n√£o encontrada para: "${question.question.substring(0, 40)}..."`);
          console.log(`   Deveria ser: "${refinedQuestion.correctOptionLabel}"`);
          
          // Listar op√ß√µes dispon√≠veis
          console.log('   Op√ß√µes dispon√≠veis:');
          question.options.forEach((opt, idx) => {
            console.log(`     ${idx + 1}. ${opt.label} (${opt.isCorrect ? '‚úì' : '‚úó'})`);
          });
          
          continue;
        }
        
        // Verificar se a op√ß√£o correta est√° marcada
        if (!question.options[correctOptionIndex].isCorrect) {
          console.log(`üîß Corrigindo resposta para: "${question.question.substring(0, 40)}..."`);
          
          // Marcar todas as op√ß√µes como incorretas
          for (let j = 0; j < question.options.length; j++) {
            quiz.questions[i].options[j].isCorrect = false;
          }
          
          // Marcar a op√ß√£o correta
          quiz.questions[i].options[correctOptionIndex].isCorrect = true;
          quizModified = true;
          questionsRefined++;
        }
      }
      
      // Salvar altera√ß√µes se o quiz foi modificado
      if (quizModified) {
        await quiz.save();
        console.log(`‚úÖ Quiz atualizado com refinamentos: ${quiz.title}`);
        quizzesUpdated++;
      } else {
        console.log(`‚úÖ Quiz j√° est√° correto: ${quiz.title}`);
      }
    }
    
    console.log('\nüìä Resumo do refinamento:');
    console.log(`   Total de quizzes verificados: ${quizzes.length}`);
    console.log(`   Total de quest√µes verificadas: ${totalQuestionsChecked}`);
    console.log(`   Quest√µes refinadas: ${questionsRefined}`);
    console.log(`   Quizzes atualizados: ${quizzesUpdated}`);
    
  } catch (error) {
    console.error('‚ùå Erro ao refinar conte√∫do te√≥rico:', error);
  }
};

// Verificar a consist√™ncia das respostas corretas
const verifyCorrectAnswers = async () => {
  try {
    console.log('\nüîç Verificando se todas as quest√µes t√™m uma op√ß√£o correta marcada...');
    
    // Buscar todos os quizzes
    const quizzes = await Quiz.find({});
    
    let totalQuestionsWithoutCorrect = 0;
    let totalQuestionsWithMultipleCorrect = 0;
    
    // Verificar cada quiz
    for (const quiz of quizzes) {
      console.log(`\nüìù Quiz: ${quiz.title}`);
      
      // Verificar cada quest√£o
      for (let i = 0; i < quiz.questions.length; i++) {
        const question = quiz.questions[i];
        
        // Contar op√ß√µes corretas
        const correctOptions = question.options.filter(opt => opt.isCorrect);
        const correctCount = correctOptions.length;
        
        // Log baseado no resultado
        if (correctCount === 0) {
          console.log(`‚ùå Quest√£o ${i+1} sem resposta correta: "${question.question.substring(0, 40)}..."`);
          totalQuestionsWithoutCorrect++;
        } else if (correctCount > 1) {
          console.log(`‚ö†Ô∏è Quest√£o ${i+1} com ${correctCount} respostas corretas: "${question.question.substring(0, 40)}..."`);
          totalQuestionsWithMultipleCorrect++;
        } else {
          console.log(`‚úÖ Quest√£o ${i+1}: "${question.question.substring(0, 40)}..." - OK`);
        }
      }
    }
    
    console.log('\nüìä Resumo da verifica√ß√£o:');
    console.log(`   Total de quest√µes sem resposta correta: ${totalQuestionsWithoutCorrect}`);
    console.log(`   Total de quest√µes com m√∫ltiplas respostas: ${totalQuestionsWithMultipleCorrect}`);
    
    if (totalQuestionsWithoutCorrect === 0 && totalQuestionsWithMultipleCorrect === 0) {
      console.log('   ‚úÖ Todas as quest√µes est√£o com exatamente uma resposta correta!');
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar respostas corretas:', error);
  }
};

// Executar o script
const main = async () => {
  try {
    await connectDB();
    
    // Refinar o conte√∫do te√≥rico
    await validateAndRefineContent();
    
    // Verificar se todas as quest√µes t√™m uma resposta correta
    await verifyCorrectAnswers();
    
    console.log('\n‚ú® Valida√ß√£o e refinamento conclu√≠dos!');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erro fatal durante a execu√ß√£o:', error);
    process.exit(1);
  }
};

// Iniciar o script
main();





























