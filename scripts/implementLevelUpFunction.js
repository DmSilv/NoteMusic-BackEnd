const mongoose = require('mongoose');
require('dotenv').config();
const fs = require('fs');
const path = require('path');

// Conectar ao banco
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB');
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    process.exit(1);
  }
};

// Implementar fun√ß√£o de atualiza√ß√£o de n√≠vel no controlador de quiz
const implementLevelUpFunction = async () => {
  try {
    console.log('üîß Implementando fun√ß√£o de atualiza√ß√£o de n√≠vel no quiz.controller.js...');
    
    // Caminho para o arquivo do controlador
    const controllerPath = path.join(__dirname, '../src/controllers/quiz.controller.js');
    
    // Verificar se o arquivo existe
    if (!fs.existsSync(controllerPath)) {
      console.error('‚ùå Arquivo do controlador n√£o encontrado:', controllerPath);
      return false;
    }
    
    // Ler o conte√∫do do arquivo
    let content = fs.readFileSync(controllerPath, 'utf8');
    
    // Verificar se a fun√ß√£o updateUserLevel j√° existe
    if (content.includes('updateUserLevel')) {
      console.log('‚ö†Ô∏è A fun√ß√£o updateUserLevel j√° parece existir no arquivo');
    } else {
      console.log('‚úÖ Adicionando fun√ß√£o updateUserLevel...');
      
      // C√≥digo da fun√ß√£o a ser adicionada
      const updateUserLevelCode = `
// Fun√ß√£o para verificar e atualizar o n√≠vel do usu√°rio
const updateUserLevel = async (user) => {
  try {
    const completedModules = user.completedModules.length;
    const totalPoints = user.totalPoints || 0;
    let shouldUpdate = false;
    let newLevel = user.level;
    
    // Verificar se o usu√°rio deve avan√ßar de n√≠vel
    switch (user.level) {
      case USER_LEVELS.BEGINNER: // aprendiz
        if (completedModules >= 2 || totalPoints >= 150) {
          newLevel = USER_LEVELS.INTERMEDIATE; // virtuoso
          shouldUpdate = true;
          console.log(\`üîº Usu√°rio \${user.name || user.email} avan√ßou para \${newLevel}\`);
        }
        break;
      
      case USER_LEVELS.INTERMEDIATE: // virtuoso
        if (completedModules >= 4 || totalPoints >= 300) {
          newLevel = USER_LEVELS.ADVANCED; // maestro
          shouldUpdate = true;
          console.log(\`üîº Usu√°rio \${user.name || user.email} avan√ßou para \${newLevel}\`);
        }
        break;
        
      default:
        break;
    }
    
    // Se o usu√°rio deve avan√ßar de n√≠vel
    if (shouldUpdate) {
      user.level = newLevel;
      await user.save();
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå Erro ao atualizar n√≠vel do usu√°rio:', error);
    return false;
  }
};
`;
      
      // Adicionar a fun√ß√£o antes do primeiro exports
      content = content.replace(/const\s+([A-Za-z]+)\s+=\s+require\(['"](.*)['"]\);/g, (match) => {
        if (match.includes('USER_LEVELS')) {
          return match;
        }
        return match;
      });
      
      // Adicionar importa√ß√£o de USER_LEVELS se n√£o existir
      if (!content.includes('USER_LEVELS')) {
        content = content.replace(/const\s+([A-Za-z]+)\s+=\s+require\(['"](.*)['"]\);/g, (match, p1, p2, offset, string) => {
          if (offset === string.indexOf(match)) {
            return match + '\nconst { USER_LEVELS } = require(\'../utils/constants\');';
          }
          return match;
        });
      }
      
      // Adicionar a fun√ß√£o no final do arquivo antes do module.exports
      content = content.replace(/module\.exports\s+=\s+{/, updateUserLevelCode + '\n\nmodule.exports = {');
    }
    
    // Verificar se j√° existe a chamada para updateUserLevel no submitQuizPrivate
    if (content.includes('const leveledUp = await updateUserLevel(user);')) {
      console.log('‚ö†Ô∏è A chamada para updateUserLevel j√° parece existir');
    } else {
      console.log('‚úÖ Adicionando chamada para updateUserLevel em submitQuizPrivate...');
      
      // Substituir o trecho onde os pontos s√£o adicionados
      content = content.replace(
        /user\.totalPoints\s+\+=\s+totalPointsEarned;\s+await\s+user\.save\(\);/g,
        `user.totalPoints += totalPointsEarned;

    // Verificar e atualizar n√≠vel do usu√°rio
    const leveledUp = await updateUserLevel(user);
    
    await user.save();`
      );
    }
    
    // Escrever o conte√∫do modificado de volta no arquivo
    fs.writeFileSync(controllerPath, content, 'utf8');
    
    console.log('‚úÖ Implementa√ß√£o conclu√≠da com sucesso!');
    return true;
  } catch (error) {
    console.error('‚ùå Erro ao implementar fun√ß√£o de atualiza√ß√£o de n√≠vel:', error);
    return false;
  }
};

// Executar o script
const main = async () => {
  try {
    await connectDB();
    
    // Implementar fun√ß√£o de atualiza√ß√£o de n√≠vel
    const success = await implementLevelUpFunction();
    
    if (success) {
      console.log('\n‚ú® Fun√ß√£o implementada com sucesso! Agora os usu√°rios avan√ßar√£o de n√≠vel automaticamente ao atingir os pontos ou m√≥dulos necess√°rios.');
    } else {
      console.log('\n‚ö†Ô∏è N√£o foi poss√≠vel implementar a fun√ß√£o completamente. Verifique o c√≥digo manualmente.');
    }
    
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erro fatal durante a execu√ß√£o:', error);
    process.exit(1);
  }
};

// Iniciar o script
main();

























