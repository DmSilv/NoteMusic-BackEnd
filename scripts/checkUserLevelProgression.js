const mongoose = require('mongoose');
require('dotenv').config();

const User = require('../src/models/User');
const { USER_LEVELS } = require('../src/utils/constants');

// Conectar ao banco
const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB');
  } catch (error) {
    console.error('‚ùå Erro ao conectar:', error);
    process.exit(1);
  }
};

// Verificar e atualizar o n√≠vel do usu√°rio com base em pontos e m√≥dulos completados
const checkUserLevelProgression = async () => {
  try {
    console.log('üîç Verificando progress√£o de n√≠veis dos usu√°rios...');
    
    // Buscar todos os usu√°rios
    const users = await User.find({}).populate('completedModules.moduleId');
    console.log(`üìä Total de usu√°rios encontrados: ${users.length}`);
    
    let updatedCount = 0;
    
    // Para cada usu√°rio
    for (const user of users) {
      console.log(`\nüë§ Analisando usu√°rio: ${user.name || user.email}`);
      console.log(`   N√≠vel atual: ${user.level}`);
      console.log(`   Total de pontos: ${user.totalPoints}`);
      console.log(`   M√≥dulos completados: ${user.completedModules.length}`);
      
      const completedModules = user.completedModules.length;
      const totalPoints = user.totalPoints || 0;
      let shouldUpdate = false;
      let newLevel = user.level;
      
      // Verificar se o usu√°rio deve avan√ßar de n√≠vel
      switch (user.level) {
        case USER_LEVELS.BEGINNER: // aprendiz
          if (completedModules >= 2 || totalPoints >= 150) {
            newLevel = USER_LEVELS.INTERMEDIATE; // virtuoso
            shouldUpdate = true;
            console.log(`   ‚ú® Usu√°rio qualificado para avan√ßar para ${newLevel}`);
          }
          break;
        
        case USER_LEVELS.INTERMEDIATE: // virtuoso
          if (completedModules >= 4 || totalPoints >= 300) {
            newLevel = USER_LEVELS.ADVANCED; // maestro
            shouldUpdate = true;
            console.log(`   ‚ú® Usu√°rio qualificado para avan√ßar para ${newLevel}`);
          }
          break;
          
        default:
          break;
      }
      
      // Se o usu√°rio deve avan√ßar de n√≠vel
      if (shouldUpdate) {
        console.log(`   üîÑ Atualizando n√≠vel de ${user.level} para ${newLevel}`);
        
        user.level = newLevel;
        await user.save();
        
        updatedCount++;
        console.log(`   ‚úÖ N√≠vel atualizado com sucesso!`);
      } else {
        console.log(`   ‚ÑπÔ∏è Usu√°rio permanece no n√≠vel ${user.level}`);
        
        // Verificar quanto falta para o pr√≥ximo n√≠vel
        if (user.level === USER_LEVELS.BEGINNER) {
          const modulesNeeded = Math.max(0, 2 - completedModules);
          const pointsNeeded = Math.max(0, 150 - totalPoints);
          
          console.log(`   üìä Faltam ${modulesNeeded} m√≥dulos OU ${pointsNeeded} pontos para avan√ßar para ${USER_LEVELS.INTERMEDIATE}`);
        } 
        else if (user.level === USER_LEVELS.INTERMEDIATE) {
          const modulesNeeded = Math.max(0, 4 - completedModules);
          const pointsNeeded = Math.max(0, 300 - totalPoints);
          
          console.log(`   üìä Faltam ${modulesNeeded} m√≥dulos OU ${pointsNeeded} pontos para avan√ßar para ${USER_LEVELS.ADVANCED}`);
        }
      }
    }
    
    console.log(`\nüìä Resumo:`);
    console.log(`   Total de usu√°rios verificados: ${users.length}`);
    console.log(`   Usu√°rios que avan√ßaram de n√≠vel: ${updatedCount}`);
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar progress√£o de n√≠veis:', error);
  }
};

// Fun√ß√£o para verificar o c√°lculo de pontos nos quizzes
const checkQuizPointsCalculation = async () => {
  try {
    console.log('\nüîç Verificando c√°lculo de pontos nos quizzes...');
    
    // Buscar usu√°rios com quizzes completados
    const users = await User.find({ 'completedQuizzes.0': { $exists: true } });
    console.log(`üìä Usu√°rios com quizzes completados: ${users.length}`);
    
    for (const user of users) {
      console.log(`\nüë§ Usu√°rio: ${user.name || user.email}`);
      console.log(`   Total de pontos: ${user.totalPoints}`);
      console.log(`   Quizzes completados: ${user.completedQuizzes.length}`);
      
      // Calcular pontos totais dos quizzes
      let totalQuizPoints = 0;
      
      for (const quiz of user.completedQuizzes) {
        const correctAnswers = quiz.score || 0;
        const quizPoints = correctAnswers * 10; // POINTS.QUIZ_QUESTION = 10
        
        // B√¥nus por desempenho (acima de 90%)
        let performanceBonus = 0;
        if (quiz.percentage >= 90) {
          performanceBonus = Math.round(quizPoints * 0.2); // POINTS.PERFECT_SCORE_BONUS = 0.2
        }
        
        const quizTotalPoints = quizPoints + performanceBonus;
        totalQuizPoints += quizTotalPoints;
        
        console.log(`   Quiz ${quiz.quizId}: ${correctAnswers} corretas, ${quizPoints} pontos base, ${performanceBonus} b√¥nus, ${quizTotalPoints} total`);
      }
      
      console.log(`   üìä Total de pontos calculados dos quizzes: ${totalQuizPoints}`);
      
      // Verificar se h√° discrep√¢ncia entre pontos calculados e pontos do usu√°rio
      const pointsDiff = user.totalPoints - totalQuizPoints;
      if (Math.abs(pointsDiff) > 50) { // Permitir alguma varia√ß√£o devido a outros fatores
        console.log(`   ‚ö†Ô∏è Poss√≠vel discrep√¢ncia de pontos: ${pointsDiff} (${totalQuizPoints} calculados vs ${user.totalPoints} registrados)`);
      } else {
        console.log(`   ‚úÖ Pontua√ß√£o parece consistente`);
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro ao verificar c√°lculo de pontos:', error);
  }
};

// Implementar fun√ß√£o para atualizar o n√≠vel do usu√°rio ap√≥s completar um quiz
const implementLevelUpFunction = async () => {
  try {
    console.log('\nüîß Implementando fun√ß√£o de atualiza√ß√£o de n√≠vel...');
    
    // C√≥digo da fun√ß√£o a ser implementada no controlador de quiz
    const updateUserLevelCode = `
// Fun√ß√£o para verificar e atualizar o n√≠vel do usu√°rio
const updateUserLevel = async (user) => {
  try {
    const completedModules = user.completedModules.length;
    const totalPoints = user.totalPoints || 0;
    let shouldUpdate = false;
    let newLevel = user.level;
    
    // Verificar se o usu√°rio deve avan√ßar de n√≠vel
    switch (user.level) {
      case USER_LEVELS.BEGINNER: // aprendiz
        if (completedModules >= 2 || totalPoints >= 150) {
          newLevel = USER_LEVELS.INTERMEDIATE; // virtuoso
          shouldUpdate = true;
          console.log(\`üîº Usu√°rio \${user.name || user.email} avan√ßou para \${newLevel}\`);
        }
        break;
      
      case USER_LEVELS.INTERMEDIATE: // virtuoso
        if (completedModules >= 4 || totalPoints >= 300) {
          newLevel = USER_LEVELS.ADVANCED; // maestro
          shouldUpdate = true;
          console.log(\`üîº Usu√°rio \${user.name || user.email} avan√ßou para \${newLevel}\`);
        }
        break;
        
      default:
        break;
    }
    
    // Se o usu√°rio deve avan√ßar de n√≠vel
    if (shouldUpdate) {
      user.level = newLevel;
      await user.save();
      return true;
    }
    
    return false;
  } catch (error) {
    console.error('‚ùå Erro ao atualizar n√≠vel do usu√°rio:', error);
    return false;
  }
};
`;
    
    // C√≥digo para adicionar a chamada da fun√ß√£o no submitQuizPrivate
    const submitQuizCode = `
    // Adicionar ao total do usu√°rio
    user.totalPoints += totalPointsEarned;
    
    // Verificar e atualizar n√≠vel do usu√°rio
    const leveledUp = await updateUserLevel(user);
    
    await user.save();
`;
    
    console.log('‚úÖ C√≥digo da fun√ß√£o gerado com sucesso!');
    console.log('Para implementar esta fun√ß√£o:');
    console.log('1. Adicione a fun√ß√£o updateUserLevel no quiz.controller.js');
    console.log('2. Substitua o trecho "user.totalPoints += totalPointsEarned; await user.save();" pelo c√≥digo fornecido');
    console.log('3. Importe USER_LEVELS de ../utils/constants no topo do arquivo');
    
  } catch (error) {
    console.error('‚ùå Erro ao implementar fun√ß√£o de atualiza√ß√£o de n√≠vel:', error);
  }
};

// Executar o script
const main = async () => {
  try {
    await connectDB();
    
    // Verificar progress√£o de n√≠veis
    await checkUserLevelProgression();
    
    // Verificar c√°lculo de pontos
    await checkQuizPointsCalculation();
    
    // Implementar fun√ß√£o de atualiza√ß√£o de n√≠vel
    await implementLevelUpFunction();
    
    console.log('\n‚ú® Processo conclu√≠do!');
    process.exit(0);
  } catch (error) {
    console.error('\n‚ùå Erro fatal durante a execu√ß√£o:', error);
    process.exit(1);
  }
};

// Iniciar o script
main();

























