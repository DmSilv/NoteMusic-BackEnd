const mongoose = require('mongoose');
const Quiz = require('../src/models/Quiz');
require('dotenv').config();

// =====================================================
// SCRIPT: CORRIGIR QUIZZES SEM RESPOSTA CORRETA
// =====================================================
// Este script encontra e corrige todos os quizzes onde
// NENHUMA op√ß√£o est√° marcada como isCorrect: true

const MAPEAMENTO_RESPOSTAS_CORRETAS = {
  // PROPRIEDADES DO SOM
  "No contexto da harmonia": "Harmonia √© a combina√ß√£o simult√¢nea de sons",
  "Considerando os conceitos b√°sicos": "A altura do som √© determinada pela frequ√™ncia das ondas sonoras",
  "conceitos b√°sicos de teoria musical": "A altura do som √© determinada pela frequ√™ncia das ondas sonoras",
  "Qual s√≠mbolo musical indica": "Sustenido (#)",
  "s√≠mbolo musical indica que": "Sustenido (#)",
  "Qual figura musical representa": "Semibreve",
  "figura musical representa a maior": "Semibreve",
  "Quando voc√™ v√™ um sinal": "Aumentar gradualmente a intensidade",
  "sinal de crescendo": "Aumentar gradualmente a intensidade",
  
  // ALTURA
  "altura do som": "A altura do som √© determinada pela frequ√™ncia das ondas sonoras",
  "som √© \"grave\" ou \"agudo\"": "Altura",
  "dizemos que um som √©": "Altura",
  "frequ√™ncia e altura": "Quanto maior a frequ√™ncia, mais agudo o som",
  
  // INTENSIDADE
  "intensidade do som": "A intensidade est√° relacionada √† amplitude da onda sonora",
  "som est√° \"alto\" ou \"baixo\"": "Intensidade",
  "volume": "Intensidade",
  "qual s√≠mbolo indica": "p (piano)",
  "tocar suavemente": "p (piano)",
  "tocar com volume baixo": "p (piano)",
  "tocar forte": "f (forte)",
  
  // TIMBRE
  "timbre": "A qualidade que diferencia sons de mesma altura e intensidade",
  "diferencia instrumentos": "Timbre",
  "mesma nota em instrumentos": "Timbre",
  
  // DURA√á√ÉO
  "dura√ß√£o do som": "O tempo durante o qual o som permanece aud√≠vel",
  "tempo que o som": "Dura√ß√£o",
  
  // FIGURAS MUSICAIS
  "SEMIBREVE": "4 tempos",
  "semibreve": "4 tempos",
  "M√çNIMA": "2 tempos",
  "m√≠nima": "2 tempos",
  "SEM√çNIMA": "1 tempo",
  "sem√≠nima": "1 tempo",
  "COLCHEIA": "1/2 tempo (meio tempo)",
  "colcheia": "1/2 tempo (meio tempo)",
  "SEMICOLCHEIA": "1/4 de tempo",
  "semicolcheia": "1/4 de tempo",
  
  // PAUSAS
  "pausa": "Indica um momento de sil√™ncio",
  "sil√™ncio": "Pausa",
  
  // COMPASSOS
  "4/4": "4 tempos por compasso",
  "3/4": "3 tempos por compasso",
  "2/4": "2 tempos por compasso",
  "primeiro n√∫mero": "O n√∫mero de tempos por compasso",
  "segundo n√∫mero": "A figura que vale um tempo",
  "BPM": "Batimentos Por Minuto",
  
  // COMPASSOS SIMPLES
  "compasso simples": "Cada tempo se divide naturalmente em duas partes iguais",
  "representa um compasso simples": "3/4",
  
  // COMPASSOS COMPOSTOS
  "compasso composto": "Cada tempo se divide naturalmente em tr√™s partes iguais",
  "representa um compasso composto": "6/8",
  
  // TONS E SEMITONS
  "tom na m√∫sica": "A dist√¢ncia de dois semitons entre duas notas",
  "semitons comp√µem um tom": "Dois semitons",
  
  // INTERVALOS
  "intervalo": "A dist√¢ncia entre duas notas",
  "quinta justa": "A dist√¢ncia de 7 semitons",
  
  // ESCALAS
  "escala de D√≥ maior": "D√≥, R√©, Mi, F√°, Sol, L√°, Si",
  "escala maior": "Tom, Tom, Semitom, Tom, Tom, Tom, Semitom",
  
  // ACORDES
  "acorde maior": "T√¥nica, ter√ßa maior e quinta justa",
  "acorde menor": "T√¥nica, ter√ßa menor e quinta justa",
  "tr√≠ade": "Maior, menor e diminuta",
  
  // FUN√á√ïES HARM√îNICAS
  "fun√ß√£o de t√¥nica": "O acorde constru√≠do sobre o primeiro grau da escala",
  "fun√ß√£o de dominante": "O acorde constru√≠do sobre o quinto grau da escala",
  "fun√ß√£o de subdominante": "O acorde constru√≠do sobre o quarto grau da escala",
  
  // CAD√äNCIAS
  "cad√™ncia perfeita": "Uma progress√£o do V para o I",
  "cad√™ncia plagal": "Uma progress√£o do IV para o I"
};

function encontrarOpcaoCorreta(questao) {
  const perguntaLower = questao.question.toLowerCase();
  
  // Procurar por palavras-chave na pergunta
  for (const [chave, respostaCorreta] of Object.entries(MAPEAMENTO_RESPOSTAS_CORRETAS)) {
    if (perguntaLower.includes(chave.toLowerCase())) {
      // Procurar a op√ß√£o que cont√©m a resposta correta
      const opcaoCorreta = questao.options.find(opt => 
        opt.text.includes(respostaCorreta) || 
        respostaCorreta.includes(opt.text)
      );
      
      if (opcaoCorreta) {
        return opcaoCorreta._id;
      }
    }
  }
  
  return null;
}

async function corrigirQuizzesSemResposta() {
  try {
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/notemusic');
    console.log('‚úÖ Conectado ao MongoDB\n');
    
    const todosQuizzes = await Quiz.find({});
    console.log(`üìä Total de quizzes no banco: ${todosQuizzes.length}\n`);
    
    let quizzesSemResposta = [];
    let questoesCorrigidas = 0;
    let questoesNaoCorrigidas = 0;
    
    // Fase 1: Identificar quizzes problem√°ticos
    console.log('üîç FASE 1: IDENTIFICANDO QUIZZES SEM RESPOSTA CORRETA');
    console.log('='.repeat(80));
    
    for (const quiz of todosQuizzes) {
      const questoesSemResposta = quiz.questions.filter(q => 
        !q.options.some(opt => opt.isCorrect === true)
      );
      
      if (questoesSemResposta.length > 0) {
        quizzesSemResposta.push({
          quiz,
          questoesSemResposta
        });
        
        console.log(`\n‚ùå Quiz: "${quiz.title}" (${quiz._id})`);
        console.log(`   üìå ${questoesSemResposta.length} quest√£o(√µes) sem resposta correta`);
        
        questoesSemResposta.forEach((q, idx) => {
          console.log(`\n   Quest√£o ${idx + 1}: "${q.question.substring(0, 60)}..."`);
          console.log(`   Op√ß√µes dispon√≠veis:`);
          q.options.forEach((opt, i) => {
            console.log(`     ${i}. ${opt.text} ${opt.isCorrect ? '‚úÖ' : ''}`);
          });
        });
      }
    }
    
    if (quizzesSemResposta.length === 0) {
      console.log('\n‚úÖ Todos os quizzes t√™m respostas corretas marcadas!\n');
      return;
    }
    
    console.log('\n' + '='.repeat(80));
    console.log(`‚ö†Ô∏è  TOTAL: ${quizzesSemResposta.length} quizzes precisam de corre√ß√£o\n`);
    
    // Fase 2: Corrigir automaticamente
    console.log('üîß FASE 2: CORRIGINDO AUTOMATICAMENTE');
    console.log('='.repeat(80));
    
    for (const { quiz, questoesSemResposta } of quizzesSemResposta) {
      let modificado = false;
      
      for (const questao of questoesSemResposta) {
        const opcaoCorretaId = encontrarOpcaoCorreta(questao);
        
        if (opcaoCorretaId) {
          // Marcar a op√ß√£o correta
          questao.options.forEach(opt => {
            opt.isCorrect = opt._id.toString() === opcaoCorretaId.toString();
          });
          
          console.log(`\n‚úÖ Quiz: "${quiz.title}"`);
          console.log(`   Quest√£o: "${questao.question.substring(0, 60)}..."`);
          console.log(`   ‚úì Resposta correta marcada!`);
          
          modificado = true;
          questoesCorrigidas++;
        } else {
          console.log(`\n‚ö†Ô∏è  Quiz: "${quiz.title}"`);
          console.log(`   Quest√£o: "${questao.question.substring(0, 60)}..."`);
          console.log(`   ‚úó N√£o foi poss√≠vel determinar a resposta correta automaticamente`);
          questoesNaoCorrigidas++;
        }
      }
      
      if (modificado) {
        await quiz.save();
        console.log(`   üíæ Quiz salvo!`);
      }
    }
    
    // Relat√≥rio Final
    console.log('\n' + '='.repeat(80));
    console.log('üìä RELAT√ìRIO FINAL');
    console.log('='.repeat(80));
    console.log(`‚úÖ Quest√µes corrigidas automaticamente: ${questoesCorrigidas}`);
    console.log(`‚ö†Ô∏è  Quest√µes que precisam corre√ß√£o manual: ${questoesNaoCorrigidas}`);
    
    if (questoesNaoCorrigidas > 0) {
      console.log('\n‚ö†Ô∏è  ATEN√á√ÉO: Algumas quest√µes n√£o puderam ser corrigidas automaticamente.');
      console.log('   Execute novamente o script de valida√ß√£o para ver os detalhes.');
    }
    
    console.log('='.repeat(80));
    
  } catch (error) {
    console.error('‚ùå Erro:', error.message);
  } finally {
    await mongoose.disconnect();
    console.log('\nüëã Desconectado do MongoDB');
  }
}

// Executar
corrigirQuizzesSemResposta();

