const http = require('http');

const API_BASE_URL = 'http://localhost:3333';

const makeRequest = (path, method = 'GET', data = null) => {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 3333,
      path: `/api${path}`,
      method: method,
      headers: {
        'Content-Type': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(body);
          resolve({ status: res.statusCode, data: jsonData });
        } catch (error) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }

    req.end();
  });
};

const testAPI = async () => {
  try {
    console.log('üåê TESTE DE API DO BACKEND');
    console.log('=' .repeat(60));

    // 1. Testar health check
    console.log('\nüè• 1. TESTANDO HEALTH CHECK:');
    console.log('-' .repeat(40));
    
    try {
      const response = await makeRequest('/health');
      console.log(`‚úÖ Status: ${response.status}`);
      console.log(`üìù Dados:`, response.data);
    } catch (error) {
      console.log(`‚ùå Erro no health check: ${error.message}`);
    }

    // 2. Testar busca de m√≥dulos
    console.log('\nüìö 2. TESTANDO BUSCA DE M√ìDULOS:');
    console.log('-' .repeat(40));
    
    try {
      const response = await makeRequest('/modules');
      console.log(`‚úÖ Status: ${response.status}`);
      
      if (response.data.modules && Array.isArray(response.data.modules)) {
        console.log(`üìä M√≥dulos encontrados: ${response.data.modules.length}`);
        response.data.modules.forEach((module, index) => {
          console.log(`   ${index + 1}. ${module.title} (${module.level})`);
        });
      } else {
        console.log(`‚ùå Estrutura de resposta inv√°lida:`, response.data);
      }
    } catch (error) {
      console.log(`‚ùå Erro ao buscar m√≥dulos: ${error.message}`);
    }

    // 3. Testar busca de quiz por m√≥dulo
    console.log('\nüéØ 3. TESTANDO BUSCA DE QUIZ POR M√ìDULO:');
    console.log('-' .repeat(40));
    
    try {
      // Primeiro buscar um m√≥dulo para pegar o ID
      const modulesResponse = await makeRequest('/modules');
      
      if (modulesResponse.data.modules && modulesResponse.data.modules.length > 0) {
        const firstModule = modulesResponse.data.modules[0];
        console.log(`üîç Testando com m√≥dulo: ${firstModule.title}`);
        console.log(`   ID: ${firstModule._id}`);
        
        // Buscar quiz para este m√≥dulo
        const quizResponse = await makeRequest(`/quiz/module/${firstModule._id}`);
        console.log(`‚úÖ Status: ${quizResponse.status}`);
        
        if (quizResponse.data.success && quizResponse.data.quiz) {
          console.log(`‚úÖ Quiz encontrado: ${quizResponse.data.quiz.title}`);
          console.log(`   Perguntas: ${quizResponse.data.quiz.questions ? quizResponse.data.quiz.questions.length : 0}`);
          console.log(`   Tempo limite: ${quizResponse.data.quiz.timeLimit}s`);
          console.log(`   N√≠vel: ${quizResponse.data.quiz.level}`);
          
          // Verificar estrutura das perguntas
          if (quizResponse.data.quiz.questions && quizResponse.data.quiz.questions.length > 0) {
            console.log(`   Estrutura da primeira pergunta:`);
            const firstQuestion = quizResponse.data.quiz.questions[0];
            console.log(`     Pergunta: ${firstQuestion.question}`);
            console.log(`     Op√ß√µes: ${firstQuestion.options ? firstQuestion.options.length : 0}`);
            if (firstQuestion.options && firstQuestion.options.length > 0) {
              firstQuestion.options.forEach((option, index) => {
                console.log(`       ${index + 1}. ${option.label}`);
              });
            }
          }
        } else {
          console.log(`‚ùå Quiz n√£o encontrado:`, quizResponse.data);
        }
      } else {
        console.log(`‚ùå Nenhum m√≥dulo encontrado para testar`);
      }
    } catch (error) {
      console.log(`‚ùå Erro ao buscar quiz: ${error.message}`);
    }

    // 4. Testar valida√ß√£o de quest√£o
    console.log('\n‚úÖ 4. TESTANDO VALIDA√á√ÉO DE QUEST√ÉO:');
    console.log('-' .repeat(40));
    
    try {
      // Buscar um quiz primeiro
      const modulesResponse = await makeRequest('/modules');
      
      if (modulesResponse.data.modules && modulesResponse.data.modules.length > 0) {
        const firstModule = modulesResponse.data.modules[0];
        const quizResponse = await makeRequest(`/quiz/module/${firstModule._id}`);
        
        if (quizResponse.data.success && quizResponse.data.quiz && quizResponse.data.quiz.questions && quizResponse.data.quiz.questions.length > 0) {
          const quizId = quizResponse.data.quiz.id;
          const questionIndex = 0;
          const selectedAnswer = 0; // Primeira op√ß√£o
          
          console.log(`üîç Testando valida√ß√£o da quest√£o ${questionIndex + 1} do quiz ${quizId}`);
          console.log(`   Resposta selecionada: ${selectedAnswer}`);
          
          const validationResponse = await makeRequest(`/quiz/${quizId}/validate/${questionIndex}`, 'POST', { selectedAnswer });
          console.log(`‚úÖ Status: ${validationResponse.status}`);
          
          if (validationResponse.data.success) {
            console.log(`‚úÖ Valida√ß√£o funcionando:`);
            console.log(`   Resposta correta: ${validationResponse.data.isCorrect}`);
            console.log(`   Resposta selecionada: ${validationResponse.data.selectedAnswer.text}`);
            console.log(`   Resposta correta: ${validationResponse.data.correctAnswer.text}`);
            console.log(`   Explica√ß√£o: ${validationResponse.data.explanation || 'N/A'}`);
            console.log(`   Pontos: ${validationResponse.data.points}`);
          } else {
            console.log(`‚ùå Erro na valida√ß√£o:`, validationResponse.data);
          }
        } else {
          console.log(`‚ùå Nenhum quiz v√°lido encontrado para testar valida√ß√£o`);
        }
      }
    } catch (error) {
      console.log(`‚ùå Erro ao testar valida√ß√£o: ${error.message}`);
    }

    // 5. Testar submiss√£o de quiz
    console.log('\nüìù 5. TESTANDO SUBMISS√ÉO DE QUIZ:');
    console.log('-' .repeat(40));
    
    try {
      // Buscar um quiz primeiro
      const modulesResponse = await makeRequest('/modules');
      
      if (modulesResponse.data.modules && modulesResponse.data.modules.length > 0) {
        const firstModule = modulesResponse.data.modules[0];
        const quizResponse = await makeRequest(`/quiz/module/${firstModule._id}`);
        
        if (quizResponse.data.success && quizResponse.data.quiz && quizResponse.data.quiz.questions && quizResponse.data.quiz.questions.length > 0) {
          const quizId = quizResponse.data.quiz.id;
          const answers = [0, 1, 2, 0, 1, 2, 0]; // Respostas de exemplo
          const timeSpent = 120; // 2 minutos
          
          console.log(`üîç Testando submiss√£o do quiz ${quizId}`);
          console.log(`   Respostas: ${answers.join(', ')}`);
          console.log(`   Tempo gasto: ${timeSpent}s`);
          
          const submissionResponse = await makeRequest(`/quiz/${quizId}/submit`, 'POST', { answers, timeSpent });
          console.log(`‚úÖ Status: ${submissionResponse.status}`);
          
          if (submissionResponse.data.success) {
            console.log(`‚úÖ Submiss√£o funcionando:`);
            console.log(`   Score: ${submissionResponse.data.score}/${submissionResponse.data.total}`);
            console.log(`   Porcentagem: ${submissionResponse.data.percentage}%`);
            console.log(`   Feedback: ${submissionResponse.data.feedback}`);
            console.log(`   Tempo gasto: ${submissionResponse.data.timeSpent}s`);
          } else {
            console.log(`‚ùå Erro na submiss√£o:`, submissionResponse.data);
          }
        } else {
          console.log(`‚ùå Nenhum quiz v√°lido encontrado para testar submiss√£o`);
        }
      }
    } catch (error) {
      console.log(`‚ùå Erro ao testar submiss√£o: ${error.message}`);
    }

    console.log('\nüéâ TESTE DE API CONCLU√çDO!');
    console.log('=' .repeat(60));

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
};

// Executar se chamado diretamente
if (require.main === module) {
  testAPI();
}

module.exports = { testAPI };



