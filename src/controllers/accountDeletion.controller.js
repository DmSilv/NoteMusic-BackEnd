const { validationResult } = require('express-validator');
const User = require('../models/User');
const QuizAttempt = require('../models/quizAttempt.model');

// @desc    Solicitar exclus√£o de conta
// @route   POST /api/auth/delete-account
// @access  Private
exports.requestAccountDeletion = async (req, res, next) => {
  try {
    const { password, reason, confirmation } = req.body;
    const userId = req.user._id;

    // Valida√ß√µes
    if (!password) {
      return res.status(400).json({
        success: false,
        message: 'Senha √© obrigat√≥ria para excluir a conta'
      });
    }

    if (!confirmation || confirmation !== 'EXCLUIR CONTA') {
      return res.status(400).json({
        success: false,
        message: 'Confirma√ß√£o obrigat√≥ria. Digite "EXCLUIR CONTA" para confirmar'
      });
    }

    // Buscar usu√°rio com senha
    const user = await User.findById(userId).select('+password');
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Usu√°rio n√£o encontrado'
      });
    }

    // Verificar senha
    const isPasswordMatch = await user.comparePassword(password);
    if (!isPasswordMatch) {
      return res.status(401).json({
        success: false,
        message: 'Senha incorreta'
      });
    }

    // Verificar se j√° tem exclus√£o solicitada
    if (user.deletionRequested) {
      return res.status(400).json({
        success: false,
        message: 'Exclus√£o de conta j√° foi solicitada',
        deletionScheduledFor: user.deletionScheduledFor
      });
    }

    // Solicitar exclus√£o
    await user.requestAccountDeletion(reason);

    console.log(`üóëÔ∏è Exclus√£o de conta solicitada para: ${user.email} (${user.name})`);
    console.log(`üìÖ Agendada para: ${user.deletionScheduledFor}`);
    console.log(`üìù Motivo: ${reason || 'N√£o informado'}`);

    res.json({
      success: true,
      message: 'Solicita√ß√£o de exclus√£o realizada com sucesso',
      deletionScheduledFor: user.deletionScheduledFor,
      warning: 'Sua conta ser√° exclu√≠da permanentemente em 7 dias. Voc√™ pode cancelar a qualquer momento fazendo login novamente.'
    });

  } catch (error) {
    console.error('‚ùå Erro ao solicitar exclus√£o de conta:', error);
    next(error);
  }
};

// @desc    Cancelar exclus√£o de conta
// @route   POST /api/auth/cancel-deletion
// @access  Private
exports.cancelAccountDeletion = async (req, res, next) => {
  try {
    const userId = req.user._id;

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Usu√°rio n√£o encontrado'
      });
    }

    if (!user.deletionRequested) {
      return res.status(400).json({
        success: false,
        message: 'Nenhuma exclus√£o pendente para cancelar'
      });
    }

    // Cancelar exclus√£o
    await user.cancelAccountDeletion();

    console.log(`‚úÖ Exclus√£o de conta cancelada para: ${user.email} (${user.name})`);

    res.json({
      success: true,
      message: 'Exclus√£o de conta cancelada com sucesso',
      warning: 'Sua conta foi reativada e voc√™ pode continuar usando o NoteMusic normalmente.'
    });

  } catch (error) {
    console.error('‚ùå Erro ao cancelar exclus√£o de conta:', error);
    next(error);
  }
};

// @desc    Verificar status de exclus√£o
// @route   GET /api/auth/deletion-status
// @access  Private
exports.getDeletionStatus = async (req, res, next) => {
  try {
    const userId = req.user._id;

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Usu√°rio n√£o encontrado'
      });
    }

    const status = {
      deletionRequested: user.deletionRequested,
      deletionRequestedAt: user.deletionRequestedAt,
      deletionScheduledFor: user.deletionScheduledFor,
      deletionReason: user.deletionReason,
      isMarkedForDeletion: user.isMarkedForDeletion(),
      daysRemaining: null
    };

    // Calcular dias restantes
    if (user.deletionScheduledFor) {
      const now = new Date();
      const diffTime = user.deletionScheduledFor - now;
      status.daysRemaining = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
    }

    res.json({
      success: true,
      status
    });

  } catch (error) {
    console.error('‚ùå Erro ao verificar status de exclus√£o:', error);
    next(error);
  }
};

// @desc    Excluir conta permanentemente (admin)
// @route   DELETE /api/auth/delete-account/:userId
// @access  Private (Admin)
exports.permanentlyDeleteAccount = async (req, res, next) => {
  try {
    const { userId } = req.params;

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({
        success: false,
        message: 'Usu√°rio n√£o encontrado'
      });
    }

    // Verificar se deve ser exclu√≠do
    if (!user.shouldBeDeleted()) {
      return res.status(400).json({
        success: false,
        message: 'Conta n√£o est√° marcada para exclus√£o ou per√≠odo de gra√ßa ainda n√£o expirou'
      });
    }

    console.log(`üóëÔ∏è Excluindo conta permanentemente: ${user.email} (${user.name})`);

    // Excluir tentativas de quiz relacionadas
    await QuizAttempt.deleteMany({ userId: userId });

    // Excluir usu√°rio
    await User.findByIdAndDelete(userId);

    console.log(`‚úÖ Conta exclu√≠da permanentemente: ${user.email}`);

    res.json({
      success: true,
      message: 'Conta exclu√≠da permanentemente'
    });

  } catch (error) {
    console.error('‚ùå Erro ao excluir conta permanentemente:', error);
    next(error);
  }
};

// @desc    Listar contas marcadas para exclus√£o (admin)
// @route   GET /api/auth/pending-deletions
// @access  Private (Admin)
exports.getPendingDeletions = async (req, res, next) => {
  try {
    const pendingDeletions = await User.find({
      deletionRequested: true,
      deletionScheduledFor: { $lte: new Date() }
    }).select('name email deletionRequestedAt deletionScheduledFor deletionReason');

    res.json({
      success: true,
      count: pendingDeletions.length,
      data: pendingDeletions
    });

  } catch (error) {
    console.error('‚ùå Erro ao listar exclus√µes pendentes:', error);
    next(error);
  }
};



