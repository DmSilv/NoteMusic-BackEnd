// @desc    Validar resposta de uma quest√£o
// @route   POST /api/quiz/:quizId/validate/:questionIndex
// @access  Public
exports.validateQuestion = async (req, res, next) => {
  try {
    const { quizId, questionIndex } = req.params;
    const { selectedAnswer } = req.body;

    console.log(`üîç Validando quest√£o ${questionIndex} do quiz ${quizId}`);
    console.log(`üìù Resposta selecionada: ${selectedAnswer} (tipo: ${typeof selectedAnswer})`);

    // Validar entrada
    if (selectedAnswer === undefined || selectedAnswer === null) {
      return res.status(400).json({
        success: false,
        message: 'Resposta √© obrigat√≥ria'
      });
    }

    // Converter para n√∫mero para garantir compara√ß√£o consistente
    const selectedAnswerIndex = Number(selectedAnswer);

    // Tratar desafio di√°rio mock
    if (quizId === 'daily-challenge-mock') {
      // Para o mock, usar dados simulados com 5 quest√µes para evitar erro de √≠ndice inv√°lido
      const mockQuestions = [
        {
          question: "Qual √© a dura√ß√£o de uma semibreve?",
          options: [
            { label: "1 tempo", isCorrect: false },
            { label: "2 tempos", isCorrect: false },
            { label: "4 tempos", isCorrect: true },
            { label: "8 tempos", isCorrect: false }
          ],
          explanation: "A semibreve √© a figura musical de maior dura√ß√£o no sistema tradicional, valendo 4 tempos em um compasso quatern√°rio."
        },
        {
          question: "Quantas linhas tem a pauta musical?",
          options: [
            { label: "4 linhas", isCorrect: false },
            { label: "5 linhas", isCorrect: true },
            { label: "6 linhas", isCorrect: false },
            { label: "7 linhas", isCorrect: false }
          ],
          explanation: "A pauta musical tradicional possui 5 linhas e 4 espa√ßos onde s√£o escritas as notas musicais."
        },
        {
          question: "Qual s√≠mbolo musical indica que devemos tocar suavemente?",
          options: [
            { label: "f (forte)", isCorrect: false },
            { label: "p (piano)", isCorrect: true },
            { label: "m (mezzo)", isCorrect: false },
            { label: "s (suave)", isCorrect: false }
          ],
          explanation: "O termo 'piano' (p) em italiano significa suave e indica que o trecho deve ser tocado com pouca intensidade."
        },
        {
          question: "Qual √© o intervalo entre as notas D√≥ e Sol?",
          options: [
            { label: "3¬™ Maior", isCorrect: false },
            { label: "4¬™ Justa", isCorrect: false },
            { label: "5¬™ Justa", isCorrect: true },
            { label: "6¬™ Menor", isCorrect: false }
          ],
          explanation: "O intervalo entre D√≥ e Sol √© uma 5¬™ Justa, pois cont√©m 5 graus diat√¥nicos (D√≥, R√©, Mi, F√°, Sol)."
        },
        {
          question: "Qual a figura musical que vale metade de uma sem√≠nima?",
          options: [
            { label: "M√≠nima", isCorrect: false },
            { label: "Colcheia", isCorrect: true },
            { label: "Semicolcheia", isCorrect: false },
            { label: "Fusa", isCorrect: false }
          ],
          explanation: "A colcheia vale metade do valor de uma sem√≠nima. Se a sem√≠nima vale um tempo, a colcheia vale meio tempo."
        }
      ];

      const question = mockQuestions[questionIndex];
      if (!question) {
        return res.status(400).json({
          success: false,
          message: '√çndice de quest√£o inv√°lido'
        });
      }

      const correctOptionIndex = question.options.findIndex(opt => opt.isCorrect === true);
      
      // Converter para garantir compara√ß√£o num√©rica
      const isCorrect = selectedAnswerIndex === correctOptionIndex;
      
      console.log(`${isCorrect ? '‚úÖ' : '‚ùå'} Quest√£o ${questionIndex}: ${isCorrect ? 'Correta' : 'Incorreta'}`);
      console.log(`  Resposta do usu√°rio: ${selectedAnswerIndex} (convertido para n√∫mero)`);
      console.log(`  Resposta correta: ${correctOptionIndex}`);

      return res.json({
        success: true,
        isCorrect,
        selectedAnswer: {
          index: selectedAnswerIndex,
          text: question.options[selectedAnswerIndex].label,
          isCorrect
        },
        correctAnswer: {
          index: correctOptionIndex,
          text: question.options[correctOptionIndex].label
        },
        explanation: question.explanation,
        points: isCorrect ? POINTS.QUIZ_QUESTION : 0
      });
    }

    // Buscar o quiz real no banco de dados
    const quiz = await Quiz.findById(quizId);
    if (!quiz) {
      return res.status(404).json({
        success: false,
        message: 'Quiz n√£o encontrado'
      });
    }

    // Verificar se a quest√£o existe
    const questionIdx = parseInt(questionIndex);
    if (isNaN(questionIdx) || questionIdx < 0 || questionIdx >= quiz.questions.length) {
      return res.status(400).json({
        success: false,
        message: '√çndice de quest√£o inv√°lido'
      });
    }

    const question = quiz.questions[questionIdx];
    
    // Verificar se a op√ß√£o existe
    if (isNaN(selectedAnswerIndex) || selectedAnswerIndex < 0 || selectedAnswerIndex >= question.options.length) {
      return res.status(400).json({
        success: false,
        message: 'Op√ß√£o inv√°lida'
      });
    }

    // Verificar se a resposta est√° correta
    const correctOptionIndex = question.options.findIndex(opt => opt.isCorrect === true);
    
    // Se n√£o encontrar op√ß√£o correta, logar erro e retornar erro
    if (correctOptionIndex === -1) {
      console.error(`‚ùå Erro: Quest√£o ${questionIdx} n√£o tem op√ß√£o correta definida`);
      return res.status(500).json({
        success: false,
        message: 'Erro interno: quest√£o mal configurada'
      });
    }
    
    const isCorrect = selectedAnswerIndex === correctOptionIndex;
    const selectedOption = question.options[selectedAnswerIndex];
    const correctOption = question.options[correctOptionIndex];
    
    console.log(`üîç Valida√ß√£o da quest√£o ${questionIdx}:`);
    console.log(`  Pergunta: "${question.question.substring(0, 40)}..."`);
    console.log(`  Resposta do usu√°rio: ${selectedAnswerIndex} (${selectedOption.label})`);
    console.log(`  Resposta correta: ${correctOptionIndex} (${correctOption.label})`);
    console.log(`  Resultado: ${isCorrect ? '‚úÖ Correta' : '‚ùå Incorreta'}`);

    res.json({
      success: true,
      isCorrect,
      selectedAnswer: {
        index: selectedAnswerIndex,
        text: selectedOption.label,
        isCorrect
      },
      correctAnswer: {
        index: correctOptionIndex,
        text: correctOption.label
      },
      explanation: selectedOption.explanation || correctOption.explanation || question.explanation || null,
      points: isCorrect ? POINTS.QUIZ_QUESTION : 0
    });
  } catch (error) {
    console.error('‚ùå Erro ao validar quest√£o:', error);
    next(error);
  }
};





















