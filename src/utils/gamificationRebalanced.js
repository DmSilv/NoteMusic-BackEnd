/**
 * üéØ SISTEMA DE GAMIFICA√á√ÉO REBALANCEADO - NoteMusic
 * 
 * PRINC√çPIO: Progress√£o baseada na CONCLUS√ÉO DE M√ìDULOS
 * B√îNUS: Apenas desafios di√°rios podem acelerar o progresso
 */

// Constantes do sistema rebalanceado
const GAMIFICATION_CONSTANTS = {
  // üìö PROGRESS√ÉO BASEADA EM M√ìDULOS COMPLETOS (ser√° calculado dinamicamente)
  MODULE_COMPLETION: {
    APRENDIZ_TO_VIRTUOSO: 16,  // 75% de 22 m√≥dulos Aprendiz (din√¢mico)
    VIRTUOSO_TO_MAESTRO: 32,   // 75% de 42 m√≥dulos total Aprendiz+Virtuoso (din√¢mico)
  },
  
  // üéØ PONTOS POR A√á√ÉO (FOCADOS EM M√ìDULOS)
  POINTS: {
    QUIZ_QUESTION: 0,           // Quiz N√ÉO d√° pontos
    QUIZ_COMPLETION: 0,         // Quiz N√ÉO d√° pontos
    MODULE_COMPLETION_APRENDIZ: 50,    // Pontos por completar m√≥dulo APRENDIZ
    MODULE_COMPLETION_VIRTUOSO: 100,   // Pontos por completar m√≥dulo VIRTUOSO
    MODULE_COMPLETION_MAESTRO: 150,    // Pontos por completar m√≥dulo MAESTRO
    DAILY_CHALLENGE_BONUS: 25,  // B√¥nus para desafio di√°rio
    STREAK_BONUS: 0,            // N√£o usa mais streak bonus
    PERFECT_SCORE_BONUS: 0,     // N√£o usa mais
  },
  
  // üéì REQUISITOS DE N√çVEL (BASEADOS EM M√ìDULOS)
  LEVEL_REQUIREMENTS: {
    aprendiz: {
      minModules: 0,
      maxModules: 1,
      description: 'Come√ßando a jornada musical'
    },
    virtuoso: {
      minModules: 2,
      maxModules: 4,
      description: 'Desenvolvendo habilidades musicais'
    },
    maestro: {
      minModules: 5,
      maxModules: Infinity,
      description: 'Mestre da teoria musical'
    }
  }
};

/**
 * üéØ Fun√ß√£o para calcular progresso baseado em M√ìDULOS COMPLETOS
 */
const calculateModuleBasedProgress = (user) => {
  const completedModules = user.completedModules?.length || 0;
  const totalPoints = user.totalPoints || 0;
  
  console.log('üîç Calculando progresso baseado em m√≥dulos:', {
    level: user.level,
    completedModules,
    totalPoints
  });
  
  switch (user.level) {
    case 'aprendiz':
      // Para ser Virtuoso: precisa completar 2 m√≥dulos
      const modulesForVirtuoso = GAMIFICATION_CONSTANTS.MODULE_COMPLETION.APRENDIZ_TO_VIRTUOSO;
      const progressModules = Math.min((completedModules / modulesForVirtuoso) * 100, 100);
      
      return {
        current: 'Aprendiz',
        next: 'Virtuoso',
        percentage: Math.round(progressModules),
        requirements: `Complete ${modulesForVirtuoso} m√≥dulos para avan√ßar`,
        modulesProgress: { 
          current: completedModules, 
          required: modulesForVirtuoso, 
          percentage: Math.round(progressModules) 
        },
        pointsProgress: { 
          current: totalPoints, 
          required: 'N/A', 
          percentage: 0,
          note: 'Pontos n√£o determinam progresso de n√≠vel'
        },
        canAdvance: completedModules >= modulesForVirtuoso
      };
    
    case 'virtuoso':
      // Para ser Maestro: precisa completar 5 m√≥dulos no total
      const modulesForMaestro = GAMIFICATION_CONSTANTS.MODULE_COMPLETION.VIRTUOSO_TO_MAESTRO;
      const progressModulesInt = Math.min((completedModules / modulesForMaestro) * 100, 100);
      
      return {
        current: 'Virtuoso',
        next: 'Maestro',
        percentage: Math.round(progressModulesInt),
        requirements: `Complete ${modulesForMaestro} m√≥dulos no total para avan√ßar`,
        modulesProgress: { 
          current: completedModules, 
          required: modulesForMaestro, 
          percentage: Math.round(progressModulesInt) 
        },
        pointsProgress: { 
          current: totalPoints, 
          required: 'N/A', 
          percentage: 0,
          note: 'Pontos n√£o determinam progresso de n√≠vel'
        },
        canAdvance: completedModules >= modulesForMaestro
      };
    
    case 'maestro':
      return {
        current: 'Maestro',
        next: 'N√≠vel M√°ximo',
        percentage: 100,
        requirements: 'N√≠vel m√°ximo atingido! Parab√©ns!',
        modulesProgress: { 
          current: completedModules, 
          required: completedModules || 1, 
          percentage: 100 
        },
        pointsProgress: { 
          current: totalPoints, 
          required: totalPoints || 1, 
          percentage: 100 
        },
        canAdvance: false
      };
    
    default:
      console.log('‚ö†Ô∏è N√≠vel n√£o reconhecido:', user.level);
      return {
        current: 'Aprendiz',
        next: 'Virtuoso',
        percentage: 0,
        requirements: `Complete ${GAMIFICATION_CONSTANTS.MODULE_COMPLETION.APRENDIZ_TO_VIRTUOSO} m√≥dulos para avan√ßar`,
        modulesProgress: { 
          current: completedModules, 
          required: GAMIFICATION_CONSTANTS.MODULE_COMPLETION.APRENDIZ_TO_VIRTUOSO, 
          percentage: 0 
        },
        pointsProgress: { 
          current: totalPoints, 
          required: 'N/A', 
          percentage: 0,
          note: 'Pontos n√£o determinam progresso de n√≠vel'
        },
        canAdvance: false
      };
  }
};

/**
 * üéØ Fun√ß√£o para obter requisitos din√¢micos baseados nos m√≥dulos dispon√≠veis
 */
const getDynamicRequirements = async () => {
  try {
    // Buscar contagem de m√≥dulos por n√≠vel
    const countsByLevel = await Module.aggregate([
      { $match: { isActive: true } },
      { $group: { _id: '$level', count: { $sum: 1 } } }
    ]);
    
    // Criar mapa de contagens
    const modulesByLevel = {};
    countsByLevel.forEach(item => {
      modulesByLevel[item._id] = item.count;
    });
    
    const aprendizCount = modulesByLevel.aprendiz || 22;
    const virtuosoCount = modulesByLevel.virtuoso || 20;
    const maestroCount = modulesByLevel.maestro || 0;
    
    console.log('üìä M√≥dulos dispon√≠veis:', {
      aprendiz: aprendizCount,
      virtuoso: virtuosoCount,
      maestro: maestroCount
    });
    
    // Calcular requisitos: 75% de cada n√≠vel
    const requiredAprendizToVirtuoso = Math.ceil(aprendizCount * 0.75);
    const totalAprendizVirtuoso = aprendizCount + virtuosoCount;
    const requiredVirtuosoToMaestro = Math.ceil(totalAprendizVirtuoso * 0.75);
    
    console.log('üéØ Requisitos calculados:', {
      'Aprendiz -> Virtuoso': `${requiredAprendizToVirtuoso}/${aprendizCount} m√≥dulos Aprendiz (75%)`,
      'Virtuoso -> Maestro': `${requiredVirtuosoToMaestro}/${totalAprendizVirtuoso} m√≥dulos total (75%)`
    });
    
    return {
      requiredAprendizToVirtuoso,
      requiredVirtuosoToMaestro,
      totalModulesByLevel: {
        aprendiz: aprendizCount,
        virtuoso: virtuosoCount,
        maestro: maestroCount
      }
    };
  } catch (error) {
    console.error('‚ùå Erro ao calcular requisitos din√¢micos:', error);
    // Valores fallback se houver erro
    return {
      requiredAprendizToVirtuoso: 16,
      requiredVirtuosoToMaestro: 32,
      totalModulesByLevel: {
        aprendiz: 22,
        virtuoso: 20,
        maestro: 0
      }
    };
  }
};

/**
 * üéØ Fun√ß√£o para calcular progresso baseado em M√ìDULOS COMPLETOS (com requisitos din√¢micos)
 */
const calculateModuleBasedProgressWithDynamic = async (user) => {
  const requirements = await getDynamicRequirements();
  const completedModules = user.completedModules?.length || 0;
  
  // Sobrescrever constantes com valores din√¢micos
  GAMIFICATION_CONSTANTS.MODULE_COMPLETION.APRENDIZ_TO_VIRTUOSO = requirements.requiredAprendizToVirtuoso;
  GAMIFICATION_CONSTANTS.MODULE_COMPLETION.VIRTUOSO_TO_MAESTRO = requirements.requiredVirtuosoToMaestro;
  
  // Usar fun√ß√£o existente com constantes atualizadas
  return calculateModuleBasedProgress(user);
};

/**
 * üéØ Fun√ß√£o para calcular pontos NOVO SISTEMA (QUIZ N√ÉO D√Å PONTOS)
 */
const calculateRebalancedPoints = (score, totalQuestions, isDailyChallenge = false, streak = 0) => {
  // NOVO SISTEMA: Quiz N√ÉO d√° pontos
  // Pontos v√™m APENAS de completar m√≥dulos
  const totalPoints = 0;
  
  console.log('üìä Quiz completado mas SEM pontos (sistema baseado em m√≥dulos)');
  
  return {
    basePoints: 0,
    quizCompletionBonus: 0,
    performanceBonus: 0,
    streakBonus: 0,
    dailyChallengeBonus: 0,
    totalPoints: 0,
    note: 'Pontos ser√£o dados ao completar o m√≥dulo'
  };
};

/**
 * üéØ Fun√ß√£o para verificar se usu√°rio pode avan√ßar de n√≠vel
 */
const canUserAdvanceLevel = (user) => {
  const completedModules = user.completedModules?.length || 0;
  
  switch (user.level) {
    case 'aprendiz':
      return completedModules >= GAMIFICATION_CONSTANTS.MODULE_COMPLETION.APRENDIZ_TO_VIRTUOSO;
    
    case 'virtuoso':
      return completedModules >= GAMIFICATION_CONSTANTS.MODULE_COMPLETION.VIRTUOSO_TO_MAESTRO;
    
    case 'maestro':
      return false; // N√≠vel m√°ximo
    
    default:
      return false;
  }
};

/**
 * üéØ Fun√ß√£o para atualizar n√≠vel baseado em m√≥dulos completos
 */
const updateUserLevelBasedOnModules = (user) => {
  const completedModules = user.completedModules?.length || 0;
  const previousLevel = user.level;
  
  // Determinar novo n√≠vel baseado apenas em m√≥dulos completos
  // PROGRESS√ÉO: Aprendiz(0-1) -> Virtuoso(2-4) -> Maestro(5+)
  if (completedModules >= 5) {
    user.level = 'maestro';
  } else if (completedModules >= 2) {
    user.level = 'virtuoso';
  } else {
    user.level = 'aprendiz';
  }
  
  // Log se houve mudan√ßa de n√≠vel
  if (previousLevel !== user.level) {
    console.log(`üéâ Usu√°rio ${user.email} avan√ßou de ${previousLevel} para ${user.level}! (${completedModules} m√≥dulos completos)`);
  }
  
  return user.level !== previousLevel;
};

module.exports = {
  GAMIFICATION_CONSTANTS,
  calculateModuleBasedProgress,
  calculateModuleBasedProgressWithDynamic,
  calculateRebalancedPoints,
  canUserAdvanceLevel,
  updateUserLevelBasedOnModules,
  getDynamicRequirements
};



