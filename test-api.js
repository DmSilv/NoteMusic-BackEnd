const fetch = (...args) => import('node-fetch').then(({default: fetch}) => fetch(...args));

async function testAPI() {
  try {
    console.log('üß™ Testando API NoteMusic...');
    
    // Teste 1: Health Check
    console.log('\n1. Testando Health Check...');
    const healthResponse = await fetch('http://localhost:3333/api/health');
    const healthData = await healthResponse.json();
    console.log('‚úÖ Health Check:', healthData);
    
    // Teste 2: Login
    console.log('\n2. Testando Login...');
    const loginResponse = await fetch('http://localhost:3333/api/auth/login', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'teste@notemusic.com',
        password: 'senha123'
      })
    });
    
    let token = null;
    if (loginResponse.ok) {
      const loginData = await loginResponse.json();
      token = loginData.token;
      console.log('‚úÖ Login bem-sucedido:', {
        user: loginData.user.name,
        level: loginData.user.level,
        token: token ? 'Recebido' : 'N√£o recebido'
      });
    } else {
      const errorData = await loginResponse.json();
      console.log('‚ùå Erro no login:', errorData);
      return;
    }
    
    // Teste 3: Obter m√≥dulos
    console.log('\n3. Testando obten√ß√£o de m√≥dulos...');
    const modulesResponse = await fetch('http://localhost:3333/api/modules');
    if (modulesResponse.ok) {
      const modulesData = await modulesResponse.json();
      console.log(`‚úÖ M√≥dulos obtidos: ${modulesData.count} m√≥dulos dispon√≠veis`);
      console.log('   Primeiros m√≥dulos:', modulesData.modules.slice(0, 3).map(m => m.title));
    } else {
      console.log('‚ùå Erro ao obter m√≥dulos');
    }
    
    // Teste 4: Obter categorias
    console.log('\n4. Testando obten√ß√£o de categorias...');
    const categoriesResponse = await fetch('http://localhost:3333/api/modules/categories');
    if (categoriesResponse.ok) {
      const categoriesData = await categoriesResponse.json();
      console.log(`‚úÖ Categorias obtidas: ${categoriesData.categories.length} categorias`);
      console.log('   Categorias:', categoriesData.categories.map(c => c.name));
    } else {
      console.log('‚ùå Erro ao obter categorias');
    }
    
    // Teste 5: Desafio di√°rio (p√∫blico)
    console.log('\n5. Testando desafio di√°rio (p√∫blico)...');
    const dailyChallengeResponse = await fetch('http://localhost:3333/api/quiz/daily-challenge');
    if (dailyChallengeResponse.ok) {
      const dailyChallengeData = await dailyChallengeResponse.json();
      console.log('‚úÖ Desafio di√°rio obtido:', {
        title: dailyChallengeData.title,
        questions: dailyChallengeData.questions.length,
        isDailyChallenge: dailyChallengeData.isDailyChallenge
      });
    } else {
      console.log('‚ùå Erro ao obter desafio di√°rio');
    }
    
    // Teste 6: Quiz p√∫blico
    console.log('\n6. Testando quiz p√∫blico...');
    const quizResponse = await fetch('http://localhost:3333/api/quiz/689d155fbc5b447ac18fdee3');
    if (quizResponse.ok) {
      const quizData = await quizResponse.json();
      console.log('‚úÖ Quiz obtido:', {
        title: quizData.title,
        questions: quizData.questions.length,
        level: quizData.level
      });
      
      // Teste 7: Submeter quiz
      console.log('\n7. Testando submiss√£o de quiz...');
      const submitResponse = await fetch('http://localhost:3333/api/quiz/689d155fbc5b447ac18fdee3/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          answers: [3, 2, 0], // Respostas corretas: Si (3), 7 notas (2), Volume alto (0)
          timeSpent: 120
        })
      });
      
      if (submitResponse.ok) {
        const submitData = await submitResponse.json();
        console.log('‚úÖ Quiz submetido (respostas corretas):', {
          score: submitData.score,
          total: submitData.total,
          percentage: submitData.percentage,
          feedback: submitData.feedback
        });
      } else {
        const errorData = await submitResponse.json();
        console.log('‚ùå Erro ao submeter quiz:', errorData);
      }

      // Teste 7b: Submeter quiz com respostas incorretas
      console.log('\n7b. Testando submiss√£o com respostas incorretas...');
      const submitWrongResponse = await fetch('http://localhost:3333/api/quiz/689d155fbc5b447ac18fdee3/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          answers: [0, 1, 2], // Respostas incorretas: D√≥ (0), 6 notas (1), Velocidade r√°pida (2)
          timeSpent: 90
        })
      });
      
      if (submitWrongResponse.ok) {
        const submitWrongData = await submitWrongResponse.json();
        console.log('‚úÖ Quiz submetido (respostas incorretas):', {
          score: submitWrongData.score,
          total: submitWrongData.total,
          percentage: submitWrongData.percentage,
          feedback: submitWrongData.feedback
        });
      } else {
        const errorData = await submitWrongResponse.json();
        console.log('‚ùå Erro ao submeter quiz com respostas incorretas:', errorData);
      }

      // Teste 7c: Simular problema do frontend (respostas como usu√°rio real)
      console.log('\n7c. Simulando problema do frontend...');
      const submitFrontendResponse = await fetch('http://localhost:3333/api/quiz/689d155fbc5b447ac18fdee3/submit', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          answers: [0, 1], // Simulando respostas do usu√°rio: D√≥ (0), 6 notas (1)
          timeSpent: 60
        })
      });
      
      if (submitFrontendResponse.ok) {
        const submitFrontendData = await submitFrontendResponse.json();
        console.log('üîç Simula√ß√£o do frontend:', {
          score: submitFrontendData.score,
          total: submitFrontendData.total,
          percentage: submitFrontendData.percentage,
          feedback: submitFrontendData.feedback,
          userAnswers: submitFrontendData.userAnswers,
          correctAnswers: submitFrontendData.correctAnswers
        });
      } else {
        const errorData = await submitFrontendResponse.json();
        console.log('‚ùå Erro na simula√ß√£o do frontend:', errorData);
      }

      // Teste 7d: Simular problema espec√≠fico do usu√°rio (quiz de 2 quest√µes)
      console.log('\n7d. Simulando problema espec√≠fico do usu√°rio...');
      
      // Primeiro, obter o desafio di√°rio (que tem 2 quest√µes)
      const dailyQuizResponse = await fetch('http://localhost:3333/api/quiz/daily-challenge');
      if (dailyQuizResponse.ok) {
        const dailyQuizData = await dailyQuizResponse.json();
        console.log('üìã Desafio di√°rio obtido:', {
          title: dailyQuizData.title,
          questions: dailyQuizData.questions.length,
          quizId: dailyQuizData._id || 'daily-challenge-mock'
        });
        
        // Simular usu√°rio acertando as 2 quest√µes
        const submitDailyResponse = await fetch('http://localhost:3333/api/quiz/daily-challenge/submit', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            answers: [0, 1], // Simulando usu√°rio acertando as 2 quest√µes
            timeSpent: 45
          })
        });
        
        if (submitDailyResponse.ok) {
          const submitDailyData = await submitDailyResponse.json();
          console.log('üîç Resultado do desafio di√°rio:', {
            score: submitDailyData.score,
            total: submitDailyData.total,
            percentage: submitDailyData.percentage,
            feedback: submitDailyData.feedback,
            userAnswers: submitDailyData.userAnswers,
            correctAnswers: submitDailyData.correctAnswers
          });
        } else {
          const errorData = await submitDailyResponse.json();
          console.log('‚ùå Erro no desafio di√°rio:', errorData);
        }
      }
    } else {
      console.log('‚ùå Erro ao obter quiz');
    }
    
    // Teste 8: Estat√≠sticas de gamifica√ß√£o
    console.log('\n8. Testando estat√≠sticas de gamifica√ß√£o...');
    const statsResponse = await fetch('http://localhost:3333/api/gamification/stats');
    if (statsResponse.ok) {
      const statsData = await statsResponse.json();
      console.log('‚úÖ Estat√≠sticas obtidas:', {
        level: statsData.stats.level,
        progress: statsData.stats.progress,
        totalModules: statsData.stats.totalModules
      });
    } else {
      console.log('‚ùå Erro ao obter estat√≠sticas');
    }
    
    // Teste 9: Esqueci minha senha
    console.log('\n9. Testando funcionalidade "Esqueci minha senha"...');
    const forgotPasswordResponse = await fetch('http://localhost:3333/api/auth/forgotpassword', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'teste@notemusic.com'
      })
    });
    
    if (forgotPasswordResponse.ok) {
      const forgotPasswordData = await forgotPasswordResponse.json();
      console.log('‚úÖ Solicita√ß√£o de redefini√ß√£o:', {
        message: forgotPasswordData.message,
        expiresIn: forgotPasswordData.expiresIn,
        tempPassword: forgotPasswordData.tempPassword ? 'Gerada' : 'N√£o mostrada'
      });
    } else {
      const errorData = await forgotPasswordResponse.json();
      console.log('‚ùå Erro na solicita√ß√£o de redefini√ß√£o:', errorData);
    }
    
    console.log('\nüéâ Todos os testes conclu√≠dos!');
    console.log('\nüìù Resumo dos testes:');
    console.log('   ‚úÖ Health Check');
    console.log('   ‚úÖ Login de usu√°rio');
    console.log('   ‚úÖ Obten√ß√£o de m√≥dulos');
    console.log('   ‚úÖ Obten√ß√£o de categorias');
    console.log('   ‚úÖ Desafio di√°rio p√∫blico');
    console.log('   ‚úÖ Quiz p√∫blico');
    console.log('   ‚úÖ Submiss√£o de quiz');
    console.log('   ‚úÖ Estat√≠sticas de gamifica√ß√£o');
    console.log('   ‚úÖ Funcionalidade "Esqueci minha senha"');
    
  } catch (error) {
    console.error('‚ùå Erro ao testar API:', error.message);
  }
}

testAPI(); 